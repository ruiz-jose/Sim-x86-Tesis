[["index.html", "Herramienta de simulación para dar soporte a la enseñanza de arquitectura de computadoras Tesis para optar al grado de Maestría en Sistemas de Información Resumen", " Herramienta de simulación para dar soporte a la enseñanza de arquitectura de computadoras Tesis para optar al grado de Maestría en Sistemas de Información Ruiz Jose Maria 2025 Resumen Existe un consenso creciente en el uso de herramientas de simulación en la enseñanza para procesos dinámicos complejos, como las operaciones intrínsecas de la computadora, que permiten representar de forma visual e interactiva la organización y arquitectura interna de la computadora, facilitando así la comprensión de su funcionamiento por parte de los alumnos y el desarrollo de los temas por parte del docente. En este contexto, los simuladores juegan una pieza clave en el campo de la Arquitectura de Computadoras, permitiendo conectar fundamentos teóricos con la experiencia práctica, simpliﬁcando abstracciones y haciendo más rica la labor docente. La arquitectura x86 es ampliamente utilizada en computadoras de escritorio y servidores. Este documento pretende realizar una comparación de los simuladores x86 que más se adecuan en el dictado de la asignatura Arquitectura de Computadoras de la carrera Licenciatura en Sistemas, establecer los criterios de evaluación y evaluar los simuladores seleccionados de acuerdo con estos criterios. La presente investigación surge en el marco del proyecto de investigación I/D novel PID-UNER 7065: “Enseñanza/aprendizaje de asignatura Arquitectura de Computadoras con herramientas de simulación de sistemas de cómputos”. El Proyecto es llevado a cabo en la Facultad de Ciencias de la Administración de la Universidad Nacional de Entre Ríos, se vincula directamente con la asignatura Arquitectura en Computadoras que se dicta en segundo año de la carrera Licenciatura en Sistemas perteneciente a la Facultad de Ciencias de la Administración de la Universidad Nacional de Entre Ríos. Palabras clave: x86, simulador, aprendizaje, enseñanza, arquitectura de computadoras. "],["agradecimientos.html", "Agradecimientos", " Agradecimientos Agradecimientos aquí. "],["intro.html", "Capítulo 1 Introducción", " Capítulo 1 Introducción El uso cotidiano de dispositivos como computadoras personales, teléfonos móviles y relojes inteligentes está sustentado en arquitecturas computacionales específicas, cuya comprensión es fundamental para el desarrollo eficiente de soluciones informáticas. Es esencial que los estudiantes de Arquitectura de Computadoras comprendan tanto la estructura como el funcionamiento interno de una computadora, y adquieran experiencia práctica con ellas. Para lograrlo, es fundamental disponer de un laboratorio bien equipado con el hardware adecuado y suficiente tiempo para que los estudiantes se familiaricen con las herramientas prácticas. En este contexto, se han desarrollado numerosos simuladores que facilitan la comprensión de la estructura y el funcionamiento de las computadoras, proporcionando valiosas experiencias de aprendizaje. Este trabajo se inscribe en dicha problemática educativa y busca contribuir con el desarrollo de una herramienta de simulación adaptada a las necesidades de la enseñanza de arquitectura de computadoras. Esta tesis, inscrita en la Maestría en Sistemas de Información de la Facultad de Ciencias de la Administración, está directamente vinculada con el proyecto de investigación I/D novel PID-UNER 7065, titulado “Enseñanza/aprendizaje de Arquitectura de Computadoras con herramientas de simulación de sistemas de cómputo”, desarrollado en la Facultad de Ciencias de la Administración de la Universidad Nacional de Entre Ríos (Colombani, Falappa, et al. 2022). La asignatura Arquitectura de Computadoras forma parte del plan de estudios de la carrera de Licenciatura en Sistemas, Universidad Nacional de Entre Ríos. Su objetivo es que los estudiantes comprendan la estructura y funcionamiento de las computadoras, y la ejecución lógica de un programa a nivel de instrucciones de máquina. Para comprender los fundamentos de la arquitectura de computadoras, resulta necesario abordar su estructura básica y funcionamiento interno, comenzando por una descripción funcional general del sistema. Desde una perspectiva funcional, una computadora es un sistema que capta datos de entrada, los procesa de acuerdo con instrucciones codificadas, y produce salidas a través de dispositivos periféricos o almacenamiento. Esta dinámica operativa constituye la base para comprender su arquitectura interna y los principios que rigen su diseño. El procesamiento se realiza a través del procesador o CPU, y es en este componente donde los estudiantes encuentran mayor complejidad y dificultades para comprender su funcionamiento. A pesar de que es posible explicar las partes del procesador, su funcionamiento, la interacción de sus componentes y enseñar lenguaje ensamblador mediante prácticas, los estudiantes suelen tener dificultades para lograr una comprensión completa del funcionamiento. Sin embargo, la utilización de simuladores permite afianzar los conocimientos de los temas vistos en las clases teóricas, por ello, los simuladores deben ser simples, intuitivos y visualmente atractivos, para que los estudiantes puedan centrarse en los conceptos de arquitectura y no en el aprendizaje de la herramienta en sí. La simulación es un término de uso diario en muchos contextos: medicina, militar, entretenimiento, educación, etc., debido a que permite ayudar a comprender cómo funciona un sistema, responder preguntas como “qué pasaría si”, con el fin de brindar hipótesis sobre cómo o por qué ocurren ciertos fenómenos. En este contexto, es necesario comprender con mayor profundidad qué se entiende por simulación y cómo esta técnica puede aplicarse en entornos educativos, se define simulación como el proceso de imitar el funcionamiento de un sistema a medida que avanza en el tiempo. Para llevar a cabo una simulación, es necesario construir un modelo conceptual que represente las características y comportamientos del sistema de interés. La simulación permite observar cómo dicho modelo evoluciona en el tiempo, replicando dinámicas reales o hipotéticas (Banks et al. 2010; Law 2015; Robinson 2014). Con los avances en el mundo digital, la simulación se ha convertido en una metodología de solución de problemas indispensable para ingenieros, docentes, diseñadores y gerentes. La complejidad intrínseca de los sistemas informáticos los hace difícil comprender y costosos de desarrollar sin utilizar simulación (Law 2015). Muchas veces en el ámbito educativo, resulta difícil transmitir fundamentos teóricos de la organización y arquitectura interna de las computadoras debido a la complejidad de los procesos involucrados. Cuando se emplean exclusivamente métodos de enseñanza tradicionales —como pizarras, libros de texto o diapositivas—, estos resultan insuficientes para representar de manera efectiva las complejidades involucradas en la arquitectura de las computadoras (Lion 2005; Contreras, Torres, and Montoya 2010; Garcia-Garcia et al. 2020). Es evidente la necesidad de utilizar nuevas tecnologías como recursos didácticos y medios de transferencia de conocimiento, ya que ayudan a los estudiantes a relacionar conceptos abstractos con realidades concretas. Estas tecnologías permiten situar al estudiante en un contexto que imita aspectos de la realidad, posibilitando la detección y análisis de problemáticas semejantes a las que se presentan en entornos reales. Este enfoque promueve un mejor entendimiento a través del trabajo exploratorio, la inferencia, el aprendizaje por descubrimiento y el desarrollo de habilidades (Nova, Ferreira, and Araújo 2013; Mustafa 2010). Un simulador de arquitectura es una herramienta que imita el hardware de un sistema, representando sus aspectos arquitectónicos y funciones. Permiten realizar cambios, pruebas y ejecutar programas sin riesgo de dañar componentes ni depender de equipos físicos disponibles (Radivojevic, Cvetanovic, and Ðordevic 2011). Algunas herramientas ofrecen una representación en forma visual e interactiva de la organización y arquitectura interna de la computadora, facilitando así la comprensión de su funcionamiento. En este sentido, los simuladores juegan una pieza clave en el campo de la Arquitectura de Computadores, permitiendo conectar fundamentos teóricos con la experiencia práctica, simpliﬁcando abstracciones y facilitando la labor docente (Nikolic et al. 2009; Hasan and Mahmood 2012; Hennessy and Patterson 2017; Stallings 2021). Dentro del estudio de las arquitecturas de computadoras, la arquitectura x86 ocupa un lugar destacado debido a su amplia difusión y compatibilidad. A continuación, se presenta una breve evolución de esta arquitectura, que justifica su inclusión en el diseño de herramientas de simulación para la enseñanza. Comenzó con el procesador Intel 8086 en 1978 como una arquitectura de 16 bits. Evolucionó a una arquitectura de 32 bits con el procesador Intel 80386 en 1985 (i386 o x86-32) y posteriormente a 64 bits con las extensiones de AMD (AMD64) y su adopción por Intel (Intel 64) (Intel Corporation 2025; AMD 2024). A pesar de la aparición de nuevas arquitecturas como ARM o RISC-V, que serán analizadas comparativamente en capítulos posteriores, la arquitectura x86 conserva una alta relevancia en contextos educativos y profesionales. Por ello, se considera pertinente su inclusión como base para el desarrollo de herramientas de simulación. Un procesador x86-64 mantiene la compatibilidad con los modos x86 existentes de 16 y 32 bits, y permite ejecutar aplicaciones de 16 y 32 bits, como así también de 64 bits. Esta compatibilidad hacia atrás protege las principales inversiones en aplicaciones y sistemas operativos desarrollados para la arquitectura x86 (Intel Corporation 2025; AMD 2024; Abel 2000). Por ello, la enseñanza de la arquitectura x86 es de gran relevancia en la asignatura Arquitecturas de Computadoras debido a los diferentes temas que aborda. Como alternativa al equipamiento físico, los simuladores permiten suplir limitaciones de hardware y tiempo, brindando una experiencia de aprendizaje más accesible y replicable (Skrien 2001). Bibliografía "],["justificación.html", "1.1 Justificación", " 1.1 Justificación Los estudiantes y docentes de la asignatura de Arquitectura de Computadoras enfrentan múltiples desafíos a la hora de abordar los complejos conceptos teóricos inherentes a la arquitectura x86. Para los estudiantes, en particular, la introducción a la arquitectura de una computadora puede resultar abrumadora debido a la abstracción y el nivel de detalle técnico requerido. Por su parte, los docentes se ven limitados en la capacidad de ilustrar estos conceptos de manera gradual y progresiva debido a la falta de herramientas didácticas específicas para esta arquitectura. Ante estos desafíos, los simuladores juegan un papel crucial como herramientas de apoyo, al permitir la exploración y experimentación con los conceptos de forma visual e interactiva. La necesidad de desarrollar un simulador específico para la arquitectura x86 se fundamenta en las limitaciones de los simuladores actuales, que no se adaptan de manera efectiva al plan de estudios específico de la asignatura Arquitectura de Computadoras, tal como se dicta en la Universidad Nacional de Entre Ríos. Aunque existen simuladores que apoyan la enseñanza de la arquitectura x86 en otros contextos (Radivojevic, Cvetanovic, and Ðordevic 2011; Nikolic et al. 2009), estos tienden a incluir una gran cantidad de contenidos preestablecidos. Si bien dichos contenidos son relevantes, introducir la arquitectura x86 en su totalidad desde las primeras instancias del curso puede resultar contraproducente para estudiantes principiantes, debido a la complejidad técnica y a la extensa cantidad de conceptos involucrados. Esta tesis propone un enfoque alternativo: el desarrollo de una herramienta de simulación específicamente diseñada para apoyar la enseñanza de los contenidos de la asignatura Arquitectura de Computadoras. El sistema simulará una computadora basada en la arquitectura x86, ofreciendo una representación progresiva de su estructura y funcionamiento. Abordará de forma modular los principales componentes del sistema: la unidad central de procesamiento (CPU), la memoria principal, el módulo de entrada/salida (E/S) y los buses de comunicación. Entre sus funcionalidades clave, permitirá: - Visualizar en detalle cada una de las etapas del ciclo de ejecución de instrucciones (fetch y execute). - Trabajar con un repertorio limitado y escalable de instrucciones en lenguaje ensamblador. - Ejecutar programas de forma paso a paso o completa. - Gestionar interrupciones básicas para simular la interacción con periféricos como teclado y pantalla. - Evaluar el rendimiento de los programas a partir de métricas observables durante la simulación. Estas características facilitarán una comprensión progresiva de la arquitectura x86 y promoverán una experiencia de aprendizaje alineada con los objetivos del curso. Tabla 1.1: Funcionalidades principales del simulador propuesto Componente Funcionalidad.Principal Propósito.Didáctico CPU Ciclo de instrucción, ejecución paso a paso Comprender la secuencia de ejecución Memoria Lectura/escritura en tiempo real Visualizar acceso a datos E/S Gestión básica de teclado/pantalla Simular interacción con periféricos Instrucciones Conjunto limitado y ampliable Acompañar el avance del curso Evaluación Métricas de rendimiento Analizar eficiencia de programas Contar con un simulador adaptado específicamente a los contenidos de esta asignatura no solo facilita el proceso de aprendizaje, al presentar los conceptos de manera progresiva y alineada con la currícula, sino que también permite una experiencia de aprendizaje contextualizada. Esto fomenta un aprendizaje significativo, en el cual los estudiantes pueden conectar teoría y práctica de manera efectiva a través de una herramienta diseñada para abordar de forma gradual y específica los conceptos fundamentales del curso. Para garantizar que el simulador sea robusto, modular, flexible y fácil de modificar o ampliar, se explorará la utilización de técnicas formales de modelado y simulación, como las redes de Petri y DEVS (Discrete Event System Specification). Estas técnicas permiten una separación conceptual entre las capas de modelado y simulación, lo cual facilita tanto la comprensión del software como su adaptación. Además, estas metodologías permiten que las simulaciones escalen de forma transparente, posibilitando su ejecución en entornos de cómputo paralelo o distribuido sin necesidad de modificar el modelo, lo que representa una ventaja significativa en términos de escalabilidad (Peterson 1981; B. Zeigler, Prähofer, and Kim 2000; Bernard P. Zeigler, Muzy, and Kofman 2018). Bibliografía "],["objetivos.html", "1.2 Objetivos", " 1.2 Objetivos El objetivo principal de esta tesis es desarrollar una herramienta de simulación centrada en la arquitectura x86, orientada a fortalecer los procesos de enseñanza y aprendizaje de la asignatura Arquitectura de Computadoras. La herramienta estará alineada con los contenidos y objetivos formativos establecidos en la currícula vigente. En función de este objetivo general, se plantean los siguientes objetivos específicos: Estudiar y evaluar diferentes herramientas actuales de simulación destinadas a dar apoyo a la enseñanza de la arquitectura x86. Diseñar e implementar una herramienta didáctica que facilite la enseñanza de los contenidos clave de la asignatura Arquitectura de Computadoras. Para ello, la herramienta deberá contemplar las siguientes funcionalidades: Una visión global de la estructura y funcionamiento de la computadora. Generación y ejecución de programas en ensamblador. Repertorio de instrucciones x86 reducido y habilitado progresivamente. Simulación visual e interactiva de micropasos de instrucciones. Gestión de interrupciones y comunicación con periféricos. Medidas de rendimiento de ejecución de programas. "],["metodología-de-desarrollo.html", "1.3 Metodología de desarrollo", " 1.3 Metodología de desarrollo La metodología de desarrollo de este simulador específico para la arquitectura x86 sigue una serie de etapas diseñadas para garantizar una progresión coherente y eficaz desde la fase de análisis hasta el diseño e implementación del simulador, de manera que se ajuste al plan de estudios de la asignatura Arquitectura de Computadoras en la Universidad Nacional de Entre Ríos. Análisis de requerimientos: En esta etapa inicial, se identifican y definen los objetivos específicos del simulador, así como los requerimientos técnicos y pedagógicos necesarios para su alineación con la currícula. Este análisis establece una base sólida y clara para todas las fases subsecuentes del proyecto, asegurando que el simulador cumpla con las necesidades educativas y técnicas del curso. Revisión y recopilación de información: Se realiza una investigación sistemática sobre los simuladores existentes que abordan la arquitectura x86, considerando su aplicabilidad en contextos educativos. Este paso incluye un análisis de las características, ventajas y limitaciones de los simuladores existentes, proporcionando una comprensión más profunda del contexto educativo y permitiendo identificar áreas de mejora en relación con el objetivo del proyecto. Estudio comparativo: A partir de la información recopilada, se realiza un estudio comparativo detallado de las características de los simuladores disponibles en el mercado. Esta etapa busca evaluar cuáles de sus funcionalidades pueden adaptarse o modificarse y cuáles deberían excluirse, de acuerdo con los objetivos del simulador y las necesidades específicas del plan de estudios. Los hallazgos de este análisis comparativo constituirán una base sólida para orientar las decisiones de diseño del simulador. Diseño y planificación del simulador: Con base en los hallazgos previos, se define la arquitectura, las funcionalidades y los módulos específicos del simulador. El diseño se enfoca en facilitar el aprendizaje progresivo de los estudiantes, implementando un repertorio de instrucciones que se habiliten a medida que avanzan en el curso. En esta etapa, se utilizan técnicas formales de modelado, como redes de Petri y DEVS (Discrete Event System Specification), para establecer una estructura modular, robusta y flexible que facilite tanto la comprensión como la modificación futura de la herramienta. Construcción y desarrollo: En esta fase, se lleva a cabo la implementación del simulador de acuerdo con el diseño previamente definido. Cada funcionalidad se implementa y verifica de manera secuencial, asegurando su conformidad con los requerimientos técnicos y pedagógicos definidos. También se realizan pruebas parciales para asegurar la precisión y funcionalidad de cada módulo, lo que permite identificar y corregir errores tempranamente. Evaluación y ajuste: Finalmente, se somete el simulador a una serie de pruebas con estudiantes o expertos en la materia para evaluar su efectividad en el aprendizaje de los conceptos de arquitectura de computadoras. Los resultados obtenidos en esta fase permiten realizar ajustes y optimizaciones necesarias, mejorando la herramienta y asegurando que cumpla con su propósito educativo de manera efectiva. "],["organización-del-documento.html", "1.4 Organización del documento", " 1.4 Organización del documento El resto de este documento se estructura de la siguiente manera: En el Capítulo (2), se presenta una descripción detallada de la arquitectura x86, definiendo sus características y el conjunto de instrucciones que la componen. Esta base teórica es fundamental para comprender los aspectos que se simularán en el proyecto. El Capítulo (3) explora el papel de la simulación desde una perspectiva didáctica, enfatizando su valor como herramienta de apoyo en la enseñanza de Arquitectura de Computadoras. Aquí se revisan los beneficios de los simuladores en la enseñanza y los desafíos que ayudan a resolver en la formación de los estudiantes. En el Capítulo (4), se realiza un análisis comparativo de los simuladores actuales, evaluándolos según criterios previamente establecidos. Este análisis permite identificar las limitaciones y fortalezas de cada simulador y establecer el contexto para la propuesta de esta tesis. Finalmente, en el Capítulo (5), se describe el desarrollo de un simulador específico que se ajusta a los objetivos de enseñanza y aprendizaje de la arquitectura x86 en el contexto de la currícula. Este simulador está diseñado como una herramienta práctica y accesible para facilitar la comprensión de conceptos complejos en la asignatura. "],["arquitectura.html", "Capítulo 2 Arquitectura de computadoras", " Capítulo 2 Arquitectura de computadoras Este capítulo aborda los conceptos fundamentales de la arquitectura de computadoras, incluyendo las filosofías de diseño CISC y RISC, la evolución de la arquitectura x86 y una introducción al lenguaje ensamblador. Estos temas constituyen la base necesaria para comprender el funcionamiento interno de los sistemas informáticos. "],["introducción-a-la-arquitectura-de-computadoras.html", "2.1 Introducción a la arquitectura de computadoras", " 2.1 Introducción a la arquitectura de computadoras La arquitectura de computadoras es una disciplina central en el campo de la informática que estudia el diseño, la organización y la interacción entre los componentes de un sistema computacional. Esta área abarca tanto aspectos de hardware como de software que interactúan directamente con él, proporcionando principios fundamentales para construir sistemas eficientes, robustos y adaptables. Comprender su funcionamiento resulta esencial para analizar cómo se implementan, optimizan y escalan los sistemas informáticos en diversos contextos tecnológicos (Stallings 2021; Tanenbaum 2016; Murdocca and Heuring 2000; Bryant and O’Hallaron 2015). Uno de los conceptos clave en esta disciplina es la distinción entre arquitectura de computadoras y organización de computadoras. La arquitectura se refiere a los elementos visibles para el programador, como el conjunto de instrucciones, los registros y los modos de direccionamiento. La organización, en cambio, se enfoca en los detalles físicos de implementación, tales como el diseño de circuitos y los ciclos de reloj necesarios para cada operación (Stallings 2021; Tanenbaum 2016; Murdocca and Heuring 2000; Hennessy and Patterson 2017; Bryant and O’Hallaron 2015). Distinguir esta diferencia es crucial para analizar cómo los diseños arquitectónicos han evolucionado en respuesta a las crecientes demandas de rendimiento, eficiencia energética y escalabilidad. En este sentido, arquitecturas como ARM y RISC-V se han consolidado en sistemas embebidos y dispositivos móviles debido a su simplicidad estructural y bajo consumo energético (Waterman and Asanović 2014; Harris and Harris 2015; Null 2023). En contraste, la arquitectura x86 ha adoptado un enfoque híbrido que combina características de CISC y RISC, permitiéndole adaptarse a los exigentes requerimientos del mercado (Bryant and O’Hallaron 2015; Stallings 2021; Patterson et al. 2014). El análisis de una arquitectura de computadoras implica examinar múltiples dimensiones técnicas que inciden en su desempeño y aplicabilidad. Entre las más relevantes se encuentran: Repertorio de instrucciones: conjunto de operaciones que el procesador puede ejecutar directamente. Capacidad de procesamiento: determinada por el número de bits con los que opera la CPU (por ejemplo, 32 o 64 bits). Modos de direccionamiento de memoria: mecanismos mediante los cuales una instrucción accede a posiciones de memoria, como el direccionamiento directo, indirecto, segmentado o lineal. Jerarquía de memoria y mecanismos de entrada/salida: estructuras que influyen en la eficiencia del acceso a datos y en la interacción con dispositivos periféricos. Grado de paralelismo: capacidad de ejecutar múltiples instrucciones o tareas simultáneamente, ya sea a nivel de instrucción (ILP) o de procesos (TLP). Estos dimensiones técnicas adquieren especial relevancia en sistemas contemporáneos aplicados a inteligencia artificial, internet de las cosas (IoT), computación en la nube y ciberseguridad, donde el equilibrio entre rendimiento, consumo energético y escalabilidad resulta determinante (David A. Patterson and Hennessy 2016a; Harris and Harris 2015; Belli et al. 2020). Un componente esencial en el estudio de esta disciplina es la arquitectura del conjunto de instrucciones (ISA, por sus siglas en inglés), que define la interfaz entre el hardware y el software (Hennessy and Patterson 2017). La ISA especifica las operaciones disponibles, la codificación de las instrucciones y las formas de manipular los datos. Esta interfaz es fundamental para el diseño de compiladores, sistemas operativos y herramientas de simulación, ya que permite abstraer el funcionamiento del hardware a nivel lógico y facilita la portabilidad del software. El diseño arquitectónico implica tomar decisiones que suponen compromisos (trade-offs), tales como la complejidad del hardware frente al rendimiento, o la eficiencia energética frente a la flexibilidad funcional. Estas decisiones determinan la aplicabilidad de una arquitectura en distintos dominios tecnológicos. Por ejemplo: La arquitectura x86 resulta adecuada para entornos que requieren alto rendimiento y compatibilidad con software legado. La arquitectura ARM se prefiere en dispositivos móviles debido a su bajo consumo energético (David A. Patterson and Hennessy 2016a; Harris and Harris 2015; Belli et al. 2020). RISC-V, por su parte, destaca por su apertura, modularidad y flexibilidad, lo que la convierte en una alternativa atractiva para investigación, docencia y aplicaciones personalizadas (David A. Patterson and Hennessy 2017; Waterman and Asanović 2014). En síntesis, el estudio de la arquitectura de computadoras permite comprender el funcionamiento interno de los sistemas, optimizar el desarrollo de soluciones tecnológicas complejas y fomentar la innovación en ingeniería de sistemas. Su enseñanza resulta fundamental en la formación en ciencias de la computación y disciplinas afines. Desde una perspectiva educativa, el uso de herramientas de simulación contribuye a una comprensión progresiva de los conceptos arquitectónicos, al permitir experimentar con distintas arquitecturas y observar de forma interactiva el comportamiento del hardware (Akram and Sawalha 2019; Menchón, Tosini, and Goñi, n.d.). Esta dimensión didáctica adquiere especial importancia en el desarrollo de la herramienta propuesta en esta tesis, centrada en la arquitectura x86. Dicha arquitectura, ampliamente difundida en contextos académicos e industriales, también presenta desafíos significativos desde el punto de vista pedagógico, debido a su complejidad estructural y diversidad funcional. Bibliografía "],["arquitecturas-von-neumann-y-harvard.html", "2.2 Arquitecturas Von Neumann y Harvard", " 2.2 Arquitecturas Von Neumann y Harvard Comprender las arquitecturas modernas requiere el análisis de dos modelos conceptuales fundamentales que sentaron las bases del diseño actual de sistemas computacionales: Von Neumann y Harvard. Estos modelos arquitectónicos no solo constituyen la base teórica de muchas arquitecturas contemporáneas, sino que también permiten identificar sus fortalezas, limitaciones y áreas de aplicación. 2.2.1 Arquitectura Von Neumann La arquitectura Von Neumann, formalizada por John von Neumann en 1945 en su influyente documento “First Draft of a Report on the EDVAC” (Neumann 1945), establece un modelo computacional en el cual tanto los datos como las instrucciones residen en una única memoria y comparten un mismo bus de comunicación. Esta arquitectura se caracteriza por sus cuatro componentes fundamentales: la unidad central de procesamiento (CPU), la unidad de control, la memoria y los dispositivos de entrada/salida. La unificación del espacio de memoria facilita el diseño del sistema y la programación, sin embargo, esta unificación también origina una limitación conocida como el ‘cuello de botella de Von Neumann’, que se refiere a la imposibilidad de acceder simultáneamente a datos e instrucciones debido al uso compartido del mismo bus, lo cual reduce la eficiencia del procesamiento, particularmente en aplicaciones con uso intensivo de datos (Hennessy and Patterson 2017; Stallings 2021). Figura 2.1: Arquitectura Von Neumann 2.2.2 Arquitectura Harvard Mientras la arquitectura Von Neumann se convertía en el paradigma dominante, paralelamente se desarrollaba un enfoque alternativo. La arquitectura Harvard tiene su origen en el diseño del Harvard Mark I, una computadora electromecánica desarrollada entre 1939 y 1944 durante la Segunda Guerra Mundial en la Universidad de Harvard bajo la dirección de Howard Aiken y con el apoyo de IBM (Ceruzzi 2003; Williams 1998). El Harvard Mark I sentó las bases para un modelo arquitectónico diferente al de Von Neumann, caracterizado por una separación física entre instrucciones y datos.En este modelo, los datos y las instrucciones residen en memorias físicamente separadas, accedidas a través de buses independientes, lo cual mejora la eficiencia del procesamiento al eliminar la competencia por el bus entre instrucciones y datos. Esta organización evita el cuello de botella característico de Von Neumann y permite un acceso paralelo que incrementa el rendimiento en escenarios críticos para la eficiencia. A continuación, se presenta una comparación sistemática entre ambos modelos, a fin de comprender mejor sus implicancias técnicas y contextos de aplicación (Tanenbaum 2016). Debido a su eficiencia, esta arquitectura se ha adoptado ampliamente en sistemas embebidos, microcontroladores y procesadores de señal digital (DSP) (Noergaard 2012). Figura 2.2: Arquitectura Harvard 2.2.3 Comparativa entre Von Neumann y Harvard Como señalan Stallings (Stallings 2021) y Hennessy (Hennessy and Patterson 2017), la arquitectura Von Neumann continúa siendo una alternativa predominante cuando se priorizan la simplicidad del diseño, la flexibilidad en la asignación de memoria y la compatibilidad con software de propósito general, como ocurre en muchas computadoras personales y servidores contemporáneos. En cambio, la arquitectura Harvard ha demostrado ventajas significativas en aplicaciones que demandan procesamiento en tiempo real y eficiencia energética, como dispositivos móviles, microcontroladores y entornos de control industrial. La elección entre ambas arquitecturas responde, en última instancia, a requerimientos específicos del sistema, ya sea por su complejidad, restricciones energéticas o necesidades de rendimiento paralelo. Para una comparación más sistemática, se pueden establecer criterios como tipo de memoria, estructura de buses, capacidad de acceso paralelo, casos de uso representativos, ventajas y limitaciones. Tabla 2.1: Cuadro comparativo entre arquitecturas Von Neumann y Harvard Característica Von.Neumann Harvard Memoria Única para datos e instrucciones Separada para datos e instrucciones Buses Bus compartido Buses independientes Acceso simultáneo No Sí Ejemplo típico Intel x86 AVR, PIC Ventaja principal Diseño más simple Mayor rendimiento Limitación principal Cuello de botella Diseño más complejo Ambos modelos conceptuales han tenido una influencia decisiva en el diseño de arquitecturas contemporáneas. Mientras que el modelo Von Neumann ofrece un enfoque unificado que simplifica el desarrollo de software y hardware, la arquitectura Harvard destaca por su capacidad para mejorar el rendimiento mediante el acceso paralelo a instrucciones y datos. Esta distinción resulta crucial al analizar el diseño de arquitecturas modernas como x86, que constituye el foco de esta tesis. Comprender las implicancias de estas decisiones arquitectónicas es esencial para evaluar el impacto en el rendimiento, la eficiencia energética y la escalabilidad de los sistemas actuales. El contraste entre estos dos modelos ha dado lugar a enfoques intermedios que buscan capitalizar las ventajas de ambos. Como resultado de esta evolución, emergen las denominadas arquitecturas híbridas, las cuales integran características de ambos modelos para optimizar el rendimiento y la flexibilidad del sistema. 2.2.4 Arquitecturas híbridas Muchas arquitecturas contemporáneas implementan un enfoque híbrido, también conocido como arquitectura Harvard modificada. Este modelo emplea memorias separadas para datos e instrucciones a nivel microarquitectónico a menudo mediante la utilización de memorias caché de nivel 1 (L1) separadas para instrucciones y datos. No obstante, desde la perspectiva del programador, el modelo de memoria se mantiene unificado, facilitando el desarrollo de software sin exponer la complejidad del diseño interno. Esta dualidad permite optimizar la implementación física del procesador sin complicar el modelo de programación (Hennessy and Patterson 2017; Null 2023; David A. Patterson and Hennessy 2017; Stallings 2021). Figura 2.3: Arquitectura Híbridas Esta aproximación híbrida se implementa en arquitecturas modernas como ARM Cortex y los procesadores Intel Core, los cuales incorporan cachés separadas para instrucciones y datos con el objetivo de optimizar el rendimiento del pipeline, lo que facilita una mayor paralelización del procesamiento y reduce los conflictos en el acceso a memoria. A pesar de que el modelo de memoria visible para el programador se presenta como unificado, a nivel interno se implementan mecanismos característicos de la arquitectura Harvard, como el uso de memorias caché separadas para instrucciones y datos (Arm Ltd. 2021; Intel Corporation 2021). La adopción de arquitecturas híbridas, como la Harvard modificada, ha permitido a los diseñadores combinar la flexibilidad del modelo Von Neumann con la eficiencia del modelo Harvard. Esta convergencia no solo optimiza el rendimiento de los sistemas, sino que también responde a las exigencias contemporáneas en términos de consumo energético y capacidad de procesamiento paralelo. En este sentido, la distinción entre ambos modelos continúa siendo un eje conceptual clave para comprender la evolución de las arquitecturas modernas y su adaptación a diferentes escenarios tecnológicos. En síntesis, la comprensión de las arquitecturas fundamentales —Von Neumann, Harvard e híbridas— resulta esencial para el desarrollo de herramientas de simulación efectivas en la enseñanza de arquitectura de computadoras. Los conceptos explorados en esta sección proporcionan los fundamentos conceptuales esenciales para el diseño y desarrollo de la herramienta de simulación propuesta en esta tesis. Bibliografía "],["tipos-de-arquitecturas.html", "2.3 Tipos de arquitecturas", " 2.3 Tipos de arquitecturas El análisis de diversas arquitecturas de computadoras, y particularmente de sus repertorios de instrucciones (Instruction Set Architecture, ISA), es esencial para comprender sus ventajas, limitaciones y áreas de aplicación. Esta evaluación comparativa permite a los diseñadores y educadores seleccionar la ISA más adecuada para sus necesidades, considerando factores como la eficiencia energética, la complejidad del hardware, la compatibilidad y el soporte educativo. Aunque arquitecturas como PowerPC, SPARC o MIPS desempeñaron un papel central en la evolución de la computación, su adopción ha disminuido significativamente en contextos industriales y académicos, debido al desplazamiento por plataformas con mayor soporte comercial y vigencia tecnológica (Stallings 2021). Su menor vigencia actual responde al surgimiento de arquitecturas más eficientes y con mejor respaldo comercial, como x86, ARM y RISC-V, que han captado la atención tanto del mercado como del ámbito educativo (Hennessy and Patterson 2017; Waterman and Asanović 2014; Null 2023; ARM Holdings 2025). Por ello, esta sección se enfoca en aquellas arquitecturas que mantienen relevancia comercial o presentan un valor pedagógico significativo en el desarrollo de simuladores educativos. 2.3.1 Arquitectura x86 La arquitectura x86, desarrollada inicialmente por Intel, ha dominado el mercado de computadoras de escritorio y servidores durante décadas, gracias a su evolución constante y soporte del ecosistema de software (Hennessy and Patterson 2017). Su conjunto de instrucciones (ISA, por sus siglas en inglés Instruction Set Architecture) incluye una amplia gama de operaciones, lo que otorga flexibilidad, aunque complica el diseño del hardware. Este equilibrio entre compatibilidad y rendimiento hace que x86 sea una opción preferida para entornos donde la capacidad de procesamiento es prioritaria, como en servidores y estaciones de trabajo (Hennessy and Patterson 2017; I. Corporation 2023). 2.3.2 Arquitectura ARM Reconocida por su alta eficiencia energética, la arquitectura ARM es la columna vertebral de dispositivos móviles y sistemas embebidos. Basada en el paradigma de conjunto de instrucciones reducidas (RISC), ARM simplifica el diseño del hardware y optimiza el consumo energético, características que la posicionan como una opción preferente para aplicaciones como smartphones y tablets. Aunque su rendimiento máximo en tareas de cómputo intensivo suele ser inferior al de x86, su equilibrio entre eficiencia energética y capacidad computacional resulta decisivo en mercados donde la autonomía y la disipación térmica son factores críticos, como los dispositivos móviles y el IoT (Patterson et al. 2014; ARM Holdings 2025). 2.3.3 Arquitectura RISC-V Como arquitectura de código abierto, RISC-V ofrece una alternativa personalizable a los modelos propietarios, destacándose en entornos académicos y de desarrollo especializado. Su ISA flexible permite a los desarrolladores personalizar sistemas según necesidades específicas, haciéndola especialmente atractiva para investigación, educación y aplicaciones embebidas. Basada en principios RISC, RISC-V combina eficiencia energética con un diseño de hardware simplificado, y su creciente ecosistema la posiciona como una fuerte competidora frente a arquitecturas establecidas como ARM. No obstante, RISC-V enfrenta desafíos para su adopción masiva, en parte debido a la falta de estándares unificados, la fragmentación de su ecosistema y la limitada presencia de proveedores comerciales consolidados, lo que dificulta su despliegue en entornos productivos críticos.(Hennessy and Patterson 2017; Waterman and Asanović 2014; Harris and Harris 2015; David A. Patterson and Hennessy 2016b). 2.3.4 Comparativa entre arquitecturas Las características distintivas de cada arquitectura condicionan su idoneidad para diversas aplicaciones. Por ejemplo, mientras x86 sobresale en entornos de alto rendimiento, ARM domina en dispositivos móviles gracias a su eficiencia energética. Por su parte, arquitecturas como RISC-V han encontrado aplicaciones relevantes en sistemas embebidos, plataformas educativas y diseños personalizados, aunque su presencia comercial difiere notablemente. La selección adecuada de una arquitectura impacta significativamente en el éxito de un proyecto, desde el diseño hasta su implementación final. Además, comprender las diferencias entre estas arquitecturas, en particular sus repertorios de instrucciones y principios de diseño, resulta fundamental en el ámbito educativo, dado que facilita el desarrollo de herramientas didácticas que simulan sus principios operativos y ayudan a los estudiantes a visualizar el funcionamiento real de los sistemas computacionales (Patterson et al. 2014; ARM Holdings 2025). Tabla 2.2: Aplicaciones de la simulación en distintos sectores Sector Aplicación Beneficio principal Automotriz Pruebas de colisión virtuales Reducción de costos y aumento de seguridad Aeroespacial Simuladores de vuelo Entrenamiento sin riesgo Medicina Simulación de cirugías Entrenamiento sin comprometer pacientes Educación Simuladores para arquitectura de computadoras Comprensión de procesos abstractos En el contexto de la enseñanza de arquitectura de computadoras, estas arquitecturas permiten abordar distintos niveles de complejidad y estilos de diseño, lo que resulta clave para la construcción de simuladores educativos efectivos. Bibliografía "],["repertorio-de-instrucciones.html", "2.4 Repertorio de instrucciones", " 2.4 Repertorio de instrucciones El repertorio de instrucciones, o Instruction Set Architecture (ISA), es el conjunto de operaciones que un procesador puede ejecutar, incluyendo su representación binaria y el conjunto de reglas que definen la interacción entre el software y el hardware. El ISA define la interfaz entre el hardware y el software, abarcando instrucciones aritméticas, lógicas, de control y de manipulación de datos, así como los modos de direccionamiento y los formatos de instrucción. Por su influencia directa en el rendimiento, la eficiencia energética y la versatilidad del sistema, el ISA constituye un componente esencial en el diseño de arquitecturas de computadoras (Hennessy and Patterson 2017; Null 2023; Stallings 2021). 2.4.1 Características clave del ISA Entre las características fundamentales a considerar en el diseño de un repertorio de instrucciones se encuentran las siguientes (Hennessy and Patterson 2017): Tipos de operandos: representan los datos que las instrucciones pueden manipular, como enteros, números en punto flotante, caracteres y direcciones de memoria. Un ISA eficiente debe soportar una amplia variedad de operandos para maximizar su versatilidad. Tipos de operaciones: incluyen las operaciones que el procesador puede realizar, como aritméticas (suma, resta), lógicas (AND, OR), de control (saltos, llamadas a subrutinas) y de manipulación de datos (almacenamiento, carga). Diversos autores destacan que un ISA bien diseñado debe lograr un equilibrio entre funcionalidad, simplicidad y eficiencia de implementación, aspectos fundamentales en el diseño de arquitecturas modernas (Hennessy and Patterson 2017; Null 2023). Modos de direccionamiento: determinan cómo se especifican los operandos en las instrucciones. Entre los modos más comunes se encuentran el inmediato, directo, indirecto, mediante registros, con desplazamiento y basado en pila. Cada uno ofrece distintos niveles de eficiencia, flexibilidad y complejidad, siendo fundamentales para optimizar el acceso a datos y la ejecución de instrucciones. Formato de las instrucciones: que definen las reglas para acceder a los operandos dentro de las instrucciones, se exploran con mayor detalle en la siguiente subsección. Figura 2.4: Características repertorio de instrucciones El diseño de un repertorio de instrucciones eficiente y versátil es un desafío complejo que requiere un equilibrio entre funcionalidad, rendimiento y facilidad de uso. La selección adecuada de operandos, operaciones y modos de direccionamiento, junto con un formato de instrucción bien estructurado, son aspectos fundamentales para lograr una arquitectura de computadoras efectiva y adaptable a diversas aplicaciones. Estas características no solo definen las capacidades funcionales de un procesador, sino que también condicionan la manera en que las instrucciones interactúan con la memoria y los registros. A continuación, se profundiza en los modos de direccionamiento, uno de los elementos que más influye en la flexibilidad y eficiencia del repertorio de instrucciones. 2.4.2 Modos de direccionamiento Los modos de direccionamiento definen los mecanismos mediante los cuales una instrucción especifica la ubicación de sus operandos, permitiendo así al procesador acceder a los datos en memoria o registros en tiempo de ejecución. A continuación, se describen los modos de direccionamiento más comúnmente implementados en las arquitecturas modernas (Stallings 2021; Hennessy and Patterson 2017): Inmediato: el operando está directamente incluido en la instrucción, permitiendo acceso rápido a valores constantes. Es eficiente para operaciones simples, aunque limitado a operandos pequeños. Directo: la instrucción contiene la dirección de memoria del operando. Es fácil de usar, pero está restringido por el rango de direcciones accesibles. Indirecto: la instrucción apunta a una dirección que contiene la ubicación real del operando, lo que amplía el rango de direcciones a costa de un acceso adicional a memoria. Registro: el operando se encuentra en un registro del procesador, proporcionando acceso extremadamente rápido, pero limitado por la cantidad de registros disponibles. Registro Indirecto: similar al modo indirecto, pero la dirección efectiva se obtiene a partir del contenido de un registro, lo que ofrece un buen equilibrio entre velocidad de acceso y capacidad de direccionamiento. Con Desplazamiento: combina una dirección base con un valor de desplazamiento, ideal para estructuras como arrays y matrices. Pila: el operando está en la parte superior de la pila, útil para gestionar subrutinas y el paso de parámetros. Para complementar la descripción anterior, la Figura 2.5 presenta una representación esquemática de los modos de direccionamiento, mostrando gráficamente cómo se calcula la dirección efectiva (EA) en cada caso (Stallings 2021). Figura 2.5: Modos de direccionamiento A = contenido de un campo de dirección en la instrucción R = contenido de un campo de dirección en la instrucción que referencia a un registro EA = dirección real (efectiva) de la posición que contiene el operando que se referencia La tabla 2.3 detalla el cálculo de la dirección para cada modo de direccionamiento. Tabla 2.3: Modos de direccionamiento básicos Modo Algoritmo Ventaja Desventaja Inmediato Operando ← A No referencia a memoria Operando de magnitud limitada Directo EA ← A Es sencillo Espacio de direcciones limitado Indirecto EA ← (A) Espacio de direcciones grande Referencias múltiples a memoria Registro EA ← R No referencia a memoria Número limitado de registros Indirecto con registro EA ← (R) Espacio de direcciones grande Referencia extra a memoria Con desplazamiento EA ← A + (R) Flexibilidad Complejidad Pila EA ← puntero de pila No referencia a memoria Aplicabilidad limitada 2.4.3 Formato de las instrucciones El formato de las instrucciones especifica la disposición y codificación de los elementos que conforman una instrucción, como el código de operación (opcode), los operandos, los modos de direccionamiento y otros campos auxiliares. Esta organización impacta directamente en la facilidad de decodificación y en el rendimiento del procesador. Este formato afecta la rapidez de decodificación y la eficiencia general del procesador (Hennessy and Patterson 2017; Tanenbaum 2016): Longitud de la instrucción: puede ser fija o variable. Las instrucciones de longitud fija permiten una decodificación más rápida y simplifican la lógica de control del procesador. En cambio, las instrucciones de longitud variable permiten una codificación más eficiente del espacio de memoria, a costa de una mayor complejidad en la etapa de decodificación. Cantidad de operandos: las instrucciones pueden trabajar con diferentes números de operandos (de 0 a 3 o más). Una mayor cantidad de operandos incrementa la expresividad de las instrucciones, pero también puede derivar en una mayor complejidad de codificación y en un mayor uso de recursos del procesador. Campos de instrucción: incluyen el opcode y campos adicionales como operandos, modos de direccionamiento y flags de condición. Estos campos determinan cuántas y qué tipo de operaciones puede ejecutar el procesador en un ciclo de reloj. La Figura 2.6 muestra un ejemplo representativo de formato de instrucción, donde se visualizan los campos que la componen y su disposición en el código binario. Figura 2.6: Formato de instrucciones 2.4.4 Comparativa de repertorios de instrucciones reales La siguiente tabla 2.4 resume las características principales de los repertorios de instrucciones en tres arquitecturas ampliamente utilizadas: x86, ARM y RISC-V. Se consideran aspectos como la longitud de las instrucciones, la cantidad de operandos, su complejidad y los modos de direccionamiento que permiten. Tabla 2.4: Comparativa de repertorios de instrucciones reales Arquitectura Longitud instrucción Nº operandos Tipos de operandos Modos de direccionamiento x86 Variable 0–3+ Complejos Muchos ARM Fija (32 bits) 3 Simples Limitados RISC-V Fija (32 bits) 3 Simples Extensible Bibliografía "],["filosofías-cisc-y-risc.html", "2.5 Filosofías CISC y RISC", " 2.5 Filosofías CISC y RISC El diseño del repertorio de instrucciones es una decisión estratégica clave en la arquitectura de procesadores, ya que determina no solo el rendimiento del sistema, sino también la complejidad del hardware y del software, en particular del compilador. Dos de las filosofías más influyentes en este campo son CISC (Complex Instruction Set Computing) y RISC (Reduced Instruction Set Computing). Mientras que CISC prioriza la reducción del número de instrucciones necesarias para realizar tareas complejas mediante operaciones multifuncionales, RISC simplifica el conjunto de instrucciones con el objetivo de maximizar la velocidad y la eficiencia energética. En esta sección se analizan ambos enfoques y sus implicaciones en el diseño de procesadores (Hennessy and Patterson 2017; Patterson et al. 2014). El debate entre las filosofías CISC y RISC se remonta a fines de la década de 1970, cuando se comenzaron a cuestionar los beneficios reales de los repertorios de instrucciones complejos. Mientras las primeras generaciones de computadoras buscaban reducir el número de instrucciones por programa, investigaciones posteriores demostraron que un conjunto reducido y eficiente de instrucciones podía mejorar significativamente el rendimiento al simplificar la ejecución y optimizar el uso del hardware. La evolución de los procesadores ha llevado a un enfoque más equilibrado, donde las arquitecturas modernas combinan elementos de ambas filosofías. Las arquitecturas modernas tienden a incorporar elementos de ambas filosofías. Por ejemplo, x86 adopta técnicas de ejecución interna propias de RISC para aumentar su rendimiento, mientras que procesadores RISC como ARM han introducido extensiones complejas para tareas específicas, acercándose parcialmente al enfoque CISC (Hennessy and Patterson 2017; Patterson et al. 2014). 2.5.1 CISC Las arquitecturas CISC, como la x86, se caracterizan por su enfoque en reducir el número de instrucciones requeridas para completar operaciones complejas. Esto se logra mediante la inclusión de instrucciones que combinan múltiples operaciones en un solo ciclo. Como resultado, los programadores necesitan escribir menos líneas de código para alcanzar un objetivo específico. Sin embargo, este diseño implica ciertas desventajas. La decodificación y ejecución de instrucciones CISC requiere un hardware considerablemente más complejo, y las instrucciones de longitud variable, típicas de estas arquitecturas, pueden aumentar el tiempo de decodificación. Esto genera cuellos de botella en el pipeline y limita el rendimiento. Un ejemplo representativo es la arquitectura x86, que ha incorporado técnicas internas de ejecución similares a RISC —como la descomposición de instrucciones mediante microcódigo— con el fin de mejorar el rendimiento sin abandonar su repertorio complejo. Utiliza microcódigo para descomponer las instrucciones complejas en operaciones más simples, parecidas a las de un procesador RISC. Aunque esta estrategia mejora la eficiencia de ejecución en algunos casos, el diseño sigue siendo más costoso en términos de consumo energético y complejidad (Patterson et al. 2014). En consecuencia, el diseño del repertorio de instrucciones —incluyendo operaciones, modos de direccionamiento y formatos— constituye la interfaz crítica entre hardware y software, afectando tanto la eficiencia de ejecución como la expresividad de los programas. Su diseño influye directamente en la eficiencia del procesamiento y en la forma en que los programas interactúan con la arquitectura subyacente, lo que refuerza su relevancia en el estudio de la arquitectura de computadoras. 2.5.2 RISC Las arquitecturas basadas en RISC, en contraste con CISC, se caracterizan por emplear instrucciones simples y de longitud fija. Esta simplificación facilita la decodificación y permite que muchas instrucciones se ejecuten en un solo ciclo de reloj. Además, esta filosofía favorece la implementación de técnicas avanzadas como el pipelining y la predicción de ramas, optimizando así el rendimiento. A nivel de hardware, RISC prioriza la eficiencia energética, una característica crucial en dispositivos móviles y sistemas embebidos. Por ello, procesadores como los basados en ARM han dominado estos mercados, especialmente en dispositivos móviles, debido a su bajo consumo energético. La simplicidad y el bajo CPI (ciclos por instrucción) han sido factores determinantes en su adopción (Hennessy and Patterson 2017). 2.5.3 Comparativa entre CISC y RISC Las diferencias entre CISC y RISC son evidentes tanto a nivel de diseño como de implementación. En las arquitecturas RISC, las instrucciones tienen una longitud fija, lo que simplifica la decodificación, reduce la latencia y mejora la predictibilidad del rendimiento. Además, este formato mejora la eficiencia del uso de la memoria caché, al ocupar menos espacio y facilitar accesos más rápidos. En cambio, las arquitecturas CISC, como x86, emplean instrucciones de longitud variable, lo que les permite ofrecer una mayor flexibilidad y un repertorio más amplio de operaciones. Sin embargo, esta flexibilidad conlleva un mayor tiempo de decodificación y una complejidad adicional en la implementación del pipeline. Esto puede causar problemas como interrupciones en el flujo debido a errores de predicción de ramas, aunque se mitiguen mediante técnicas avanzadas como la predicción dinámica de saltos y el prefetching (Tanenbaum 2016). Por ejemplo, en RISC, los modos de direccionamiento son simples y permiten un acceso más rápido a los operandos, reduciendo la latencia en el pipeline (Stallings 2021). En CISC, los modos de direccionamiento más complejos proporcionan flexibilidad a costa de una mayor latencia, lo que impacta negativamente en el rendimiento general del sistema. 2.5.3.1 Ejemplos de instrucciones Para ilustrar la diferencia entre ambas filosofías, se presenta el siguiente ejemplo: cargar dos valores de memoria, sumarlos y almacenar el resultado en una dirección de memoria. RISC: LOAD R1, [mem1] # Cargar el valor de mem1 en el registro R1 LOAD R2, [mem2] # Cargar el valor de mem2 en el registro R2 ADD R3, R1, R2 # Sumar los valores en los registros R1 y R2, guardar en R3 STORE R3, [mem1] # Guardar el resultado en mem1 CISC: MOV EAX, [mem1] # Cargar el valor de mem1 en el registro EAX ADD EAX, [mem2] # Sumar el valor de mem2 con EAX MOV [mem1], EAX # Guardar el resultado de la suma de vuelta en mem1 La tabla 2.5 sintetiza las principales diferencias estructurales y operativas entre las filosofías CISC y RISC, destacando sus implicancias en el diseño del hardware y el rendimiento general del sistema. Tabla 2.5: Comparativa entre CISC y RISC Aspecto CISC RISC Objetivo principal Minimizar el número de instrucciones para operaciones complejas Simplificar el conjunto de instrucciones para optimizar velocidad y eficiencia energética Tipo de instrucciones Instrucciones complejas, longitud variable Instrucciones simples, longitud fija Decodificación y ejecución Requiere hardware más complejo, posibles cuellos de botella en el pipeline Decodificación más sencilla, facilita el uso de técnicas avanzadas como pipelining Longitud de instrucciones Longitud variable, puede aumentar el tiempo de decodificación Longitud fija, simplifica la decodificación y mejora la predictibilidad del rendimiento Eficiencia energética Menor eficiencia energética en comparación con RISC Mayor eficiencia energética, especialmente en dispositivos móviles Modos de direccionamiento Flexibilidad a costa de mayor latencia Acceso más rápido a los operandos, menor latencia 2.5.3.2 Convergencia de filosofías A pesar de sus diferencias, las arquitecturas modernas tienden a integrar características de ambas filosofías. Por ejemplo, los procesadores x86 adoptan técnicas propias de RISC para mejorar la eficiencia energética y el rendimiento. Esta convergencia refleja cómo los avances en diseño de procesadores buscan combinar lo mejor de cada enfoque, maximizando la flexibilidad y la eficiencia para adaptarse a las necesidades actuales y futuras del mercado. La Figura 2.7 muestras la convergencia entre estas dos filosofías: Figura 2.7: Convergencia de filosofías En síntesis, las filosofías CISC y RISC representan enfoques contrastantes pero complementarios en el diseño de arquitecturas de procesadores. Su comprensión no solo es esencial para analizar el rendimiento y la eficiencia energética de los sistemas modernos, sino también para formar una base sólida en la enseñanza de arquitectura de computadoras, especialmente en contextos donde se emplean simuladores didácticos. Bibliografía "],["arquitectura-x86-1.html", "2.6 Arquitectura x86", " 2.6 Arquitectura x86 La arquitectura x86, reconocida por su amplia adopción en computadoras personales, estaciones de trabajo y servidores, se introdujo en 1978 con el procesador Intel 8086, basado en una arquitectura de 16 bits. Desde entonces, ha evolucionado en capacidad y complejidad, con hitos clave como la introducción del Intel 80386 (32 bits) en 1985 y la extensión a 64 bits con AMD64 en 2003. Esta evolución ha permitido mejoras significativas en el rendimiento, el direccionamiento de memoria y la compatibilidad con aplicaciones exigentes. (Stallings 2021; Intel Corporation 2025, 1979; AMD 2024; Abel 2000; Brey 2013). Figura 2.8: Diagrama esquemático microprocesador Intel 8086 2.6.1 Evolución de la arquitectura x86 Uno de los pilares del éxito de la arquitectura x86 ha sido su retrocompatibilidad, permitiendo la ejecución de aplicaciones de 16, 32 y 64 bits en un mismo sistema. Dicha propiedad no solo ha garantizado la continuidad del ecosistema x86, sino que también ha protegido las inversiones en software y sistemas operativos, una característica fundamental en entornos empresariales y académicos. A continuación, se presenta la tabla 2.6 que resume los hitos clave en la evolución de los procesadores x86: Tabla 2.6: Hitos en la evolución x86 Procesador Año de Lanzamiento Número de Bits Extensiones de 64 bits Intel 8086 1978 16 Arquitectura inicial Intel 80386 1985 32 Memoria virtual AMD64 2003 64 Extensiones de 64 bits La tabla 2.7 muestra cómo la evolución de x86 ha estado marcada por avances tecnológicos que han impulsado la informática hacia nuevas fronteras: Tabla 2.7: Línea de Tiempo de la Evolución de la Arquitectura x86 Año Procesador Innovación 1978 Intel 8086 Introducción de la arquitectura x86, 16 bits 1982 Intel 80286 Modos de operación adicionales 1985 Intel 80386 Arquitectura de 32 bits, memoria virtual 1989 Intel 80486 Unidad de punto flotante integrada, mejor caché 1993 Intel Pentium Ejecución superescalar, predicción de saltos 1995 Intel Pentium Pro Ejecución fuera de orden, caché L2 integrada 2003 AMD64 Extensiones a 64 bits, mayor acceso a memoria 2006 Intel Core Optimización de rendimiento y eficiencia energética 2.6.2 Repertorio de instrucciones x86 La arquitectura x86 destaca por su complejidad y flexibilidad, reflejada en un repertorio de instrucciones extenso y de longitud variable. Esto contrasta con arquitecturas RISC, donde predominan instrucciones de longitud fija y decodificación sencilla (Hennessy and Patterson 2017; Brey 2013). Aunque esta flexibilidad implica una mayor capacidad expresiva y compatibilidad hacia atrás, también introduce desafíos de diseño, tales como la necesidad de decodificadores complejos, técnicas de predicción de instrucciones y ejecución fuera de orden para lograr un rendimiento competitivo. 2.6.2.1 Estructura de una instrucción x86 Una instrucción típica de x86 puede incluir los siguientes componentes (Stallings 2021): Prefijos: modifican la operación principal de la instrucción. Por ejemplo, el prefijo 0x66 cambia el tamaño del operando. Código de operación (Opcode): indica la operación a realizar. Por ejemplo, 0x89 corresponde MOV. Modificadores de dirección (ModR/M y SIB): definen registros y direccionamiento. El byte SIB (Scale, Index, Base) es especialmente útil para operaciones complejas, como el acceso a matrices. Desplazamiento e inmediato: Agregan flexibilidad en el manejo de datos, aunque aumentan la complejidad. Figura 2.9: Formato de instrucciones del Pentium x86 Un ejemplo típico de instrucción es: MOV AX, [BX+SI+16] Esta instrucción utiliza varios componentes, que el procesador debe decodificar antes de ejecutarla. Aunque esta flexibilidad es una ventaja en términos de funcionalidad, requiere técnicas avanzadas, como predicción de saltos y paralelización, para mantener la eficiencia en procesadores modernos (Hennessy and Patterson 2017; Patterson et al. 2014; Brey 2013). Bibliografía "],["lenguaje-máquina-y-lenguaje-ensamblador.html", "2.7 Lenguaje máquina y lenguaje ensamblador", " 2.7 Lenguaje máquina y lenguaje ensamblador El lenguaje máquina es el conjunto de instrucciones que un procesador puede entender y ejecutar directamente. Cada procesador tiene su propio conjunto de instrucciones, que se representan en forma de números binarios. Estas instrucciones son específicas para cada arquitectura y están diseñadas para realizar operaciones básicas como sumar, restar, mover datos entre registros y acceder a la memoria. El lenguaje máquina es el nivel más bajo de programación y está compuesto por secuencias de bits que representan operaciones y operandos específicos del procesador (Irvine and Das 2011; Hennessy and Patterson 2017). El procesador ejecuta directamente las instrucciones codificadas en lenguaje máquina, sin requerir traducción desde niveles superiores de abstracción. Sin embargo, la escritura manual de código en lenguaje máquina es un proceso extremadamente laborioso, propenso a errores y difícil de mantener. Cada instrucción debe representarse como una cadena precisa de ceros y unos. Esta codificación depende de las reglas específicas del procesador, que incluyen los modos de direccionamiento, los formatos de instrucción y la organización de la memoria (Irvine and Das 2011; Stallings 2021; Tanenbaum 2016; Null 2023). Por ejemplo, si un estudiante o desarrollador deseara sumar dos números en lenguaje máquina, tendría que especificar manualmente cada secuencia binaria correspondiente a la operación de suma, así como las direcciones de memoria donde se encuentran los operandos. Este enfoque no solo es tedioso, sino que también aumenta la probabilidad de errores, especialmente cuando se requiere modificar o depurar el código. Ante las limitaciones del lenguaje máquina en términos de legibilidad y mantenibilidad, se desarrolló un lenguaje de bajo nivel con mayor legibilidad que el lenguaje máquina que permitiera al programador escribir instrucciones de forma más comprensible: el lenguaje ensamblador. Este lenguaje permite a los programadores escribir instrucciones más comprensibles mediante mnemónicos simbólicos, que actúan como representaciones legibles de las instrucciones en lenguaje máquina. Cada arquitectura de procesador define su propio conjunto de instrucciones (ISA, Instruction Set Architecture), lo que implica que el lenguaje ensamblador asociado debe ajustarse a la codificación binaria, modos de direccionamiento y sintaxis específicos de dicha ISA (Stallings 2021). En el ámbito educativo, el lenguaje ensamblador se destaca como una herramienta fundamental para comprender cómo se comunican el software y el hardware (Null 2023; Tanenbaum 2016). Permite a los estudiantes visualizar la ejecución de instrucciones individuales, analizar el uso de registros y explorar la estructura de la memoria, convirtiéndose en un recurso valioso para este propósito. Un programa en lenguaje ensamblador suele estar compuesto por instrucciones que especifican un mnemónico, uno o más operandos, y eventualmente el modo de direccionamiento. Por ejemplo: MOV AX, 5 ADD AX, BX Estas líneas indican que el valor 5 se mueve al registro AX y luego se suma el contenido de BX. A través de este tipo de instrucciones, el estudiante puede visualizar de forma explícita cómo opera el procesador sobre sus registros y memoria. 2.7.1 Ensamblador El ensamblador es un programa que traduce las instrucciones simbólicas escritas en lenguaje ensamblador a lenguaje máquina, es decir, las convierte en las secuencias binarias que el procesador puede interpretar y ejecutar. Este proceso de traducción es prácticamente directo, ya que existe una correspondencia uno a uno entre las instrucciones en ensamblador y las instrucciones en lenguaje máquina (Stallings 2021; Tanenbaum 2016). En contraste, los lenguajes de programación de alto nivel, como C o Python, suelen generar múltiples instrucciones máquina por cada línea de código fuente, lo que los distancia más de la arquitectura subyacente (Hennessy and Patterson 2017). La Figura 2.10 muestra el proceso de traducción de un programa en lenguaje ensamblador a lenguaje máquina. En este proceso, el ensamblador toma cada línea de código en ensamblador y la convierte en su representación binaria correspondiente, generando así un archivo ejecutable que puede ser cargado y ejecutado por el procesador. Figura 2.10: Proceso de ensamblado 2.7.2 Ensambladores x86 En el caso de la arquitectura x86, los programadores pueden elegir entre diversos ensambladores, como TASM (Turbo Assembler) (International 1993), MASM (Microsoft Macro Assembler) (M. Corporation 1992) y NASM (Netwide Assembler) (The NASM Project 2023). Aunque cada ensamblador tiene características y sintaxis particulares, todos comparten el objetivo fundamental de convertir las instrucciones ensamblador en código binario ejecutable por los procesadores x86 (Hyde 2010). A continuación, se presenta una tabla comparativa 2.8 que resume las principales características de tres ensambladores ampliamente utilizados en la arquitectura x86. La información compilada permite visualizar diferencias relevantes en términos de sintaxis, compatibilidad, funcionalidades adicionales y contexto de uso, lo que resulta particularmente útil al momento de seleccionar herramientas adecuadas para entornos educativos o de desarrollo de bajo nivel. Tabla 2.8: Comparación de ensambladores arquitectura x86 Característica TASM MASM NASM Desarrollador Borland Microsoft Simon Tatham et al.  Año de lanzamiento 1985 1981 1996 Sistema operativo MS-DOS, Windows MS-DOS, Windows Multiplataforma (Windows, Linux, macOS) Sintaxis Sintaxis similar a Intel con extensiones Sintaxis de Intel con soporte avanzado Sintaxis de Intel, modular y extensible Soporte de macros Macros y directivas avanzadas Macros y directivas extensivas Macros avanzadas y preprocesamiento Compatibilidad Compatibilidad con x86 antiguo Compatibilidad con x86 antiguo Compatibilidad con x86, x86-64 y otros Capacidades adicionales Integración con herramientas Borland Integración con Visual Studio Soporte para múltiples formatos (binario, ELF, etc.) Licencia Comercial Comercial Código abierto Uso actual Menos común, usado en entornos heredados Ampliamente usado en desarrollo Windows Popular en sistemas y software libre Bibliografía "],["simulacion.html", "Capítulo 3 Simulación", " Capítulo 3 Simulación En este capítulo se analiza el papel de la simulación desde una perspectiva didáctica, destacando su relevancia como herramienta de apoyo en la enseñanza de Arquitectura de Computadoras. Se abordan los beneficios que ofrecen los simuladores en el proceso educativo y los desafíos que ayudan a superar en la formación de los estudiantes. "],["introducción-a-la-simulación.html", "3.1 Introducción a la simulación", " 3.1 Introducción a la simulación La simulación constituye una herramienta esencial en múltiples dominios, incluidos la medicina, la defensa, el entretenimiento y particularmente la educación, debido a su capacidad para representar procesos complejos y facilitar la toma de decisiones en entornos seguros y controlados. Su principal valor radica en su capacidad para modelar sistemas complejos, generar hipótesis, realizar análisis predictivos y explorar escenarios de manera segura y eficiente. Banks define la simulación como el proceso de replicar el comportamiento de un sistema a lo largo del tiempo mediante un modelo conceptual que representa sus características y dinámicas principales (Banks et al. 2010). Estos modelos evolucionan simulando las interacciones entre sus componentes, lo que permite estudiar su respuesta ante diferentes variables y escenarios (Robinson 2014). La posibilidad de analizar sistemas complejos sin intervenir directamente en ellos convierte a la simulación en una herramienta indispensable en el contexto actual, marcado por el avance de la tecnología y la creciente complejidad de los sistemas. Además, la simulación permite optimizar diseños, prever comportamientos y reducir los costos de desarrollo antes de implementar soluciones reales (Law 2015; B. Zeigler, Prähofer, and Kim 2000). 3.1.1 Aplicaciones de la simulación en la industria En sectores como la industria automotriz, la simulación es fundamental para el diseño y prueba de sistemas de seguridad, como airbags y frenos. Gracias a modelos virtuales, se realizan pruebas de colisión y análisis de rendimiento sin necesidad de recurrir a costosas pruebas físicas. Asimismo, la simulación permite optimizar diseños de motores, analizar el flujo aerodinámico y prever el comportamiento de materiales en condiciones extremas, contribuyendo a mejorar tanto la eficiencia como la seguridad de los vehículos (Stork et al. 2008). En la aviación, los simuladores de vuelo son esenciales para entrenar pilotos, replicando condiciones reales de vuelo sin riesgos. Durante el diseño de aeronaves, estas herramientas permiten evaluar la aerodinámica y el rendimiento en diversos entornos, reduciendo significativamente el tiempo y los costos de desarrollo mientras incrementan la seguridad (Jentsch and Curtis 2017). Estos principios generales encuentran aplicaciones concretas en diversos sectores industriales, donde la simulación cumple un papel clave tanto en el diseño como en el entrenamiento, la evaluación y la toma de decisiones. Tabla 3.1: Aplicaciones de la simulación en distintos sectores Sector Aplicación Beneficio principal Automotriz Pruebas de colisión virtuales Reducción de costos y aumento de seguridad Aeroespacial Simuladores de vuelo Entrenamiento sin riesgo Medicina Simulación de cirugías Entrenamiento sin comprometer pacientes Educación Simuladores para arquitectura de computadoras Comprensión de procesos abstractos Estos ejemplos ilustran cómo la simulación contribuye significativamente a la optimización de procesos, la reducción de riesgos y la mejora continua en el desarrollo de sistemas complejos. Su uso no solo ha transformado sectores productivos, sino que también ofrece un modelo replicable en contextos educativos especializados, como la enseñanza de arquitectura de computadoras. Bibliografía "],["simulación-en-la-educación.html", "3.2 Simulación en la educación", " 3.2 Simulación en la educación En contextos educativos, la simulación se ha consolidado como una estrategia pedagógica eficaz para facilitar la comprensión de fenómenos complejos, especialmente en disciplinas que requieren alto nivel de abstracción y razonamiento sistémico. A través de simuladores, los estudiantes pueden interactuar con sistemas virtuales y experimentar escenarios realistas, lo que mejora la comprensión de ideas abstractas y favorece la aplicación práctica de conocimientos teóricos (Lion 2005). En contraste con enfoques instruccionales tradicionales centrados en la transmisión de información, los simuladores favorecen metodologías activas basadas en el aprendizaje por descubrimiento, la resolución de problemas y la construcción significativa del conocimiento, las herramientas de simulación integran tecnologías que vinculan conceptos teóricos con situaciones reales. Esto promueve una pedagogía interactiva, basada en la resolución de problemas y el aprendizaje por descubrimiento, estimulando la exploración y el razonamiento inferencial (Contreras, Torres, and Montoya 2010). En definitiva, la simulación enriquece la experiencia de aprendizaje al proporcionar una plataforma dinámica y participativa que facilita tanto la experimentación como la asimilación profunda de los contenidos. 3.2.1 El rol de la simulación en la enseñanza de Arquitectura de Computadoras En la carrera de Licenciatura en Sistemas, la asignatura Arquitectura de Computadoras persigue varios objetivos esenciales: - Comprender la estructura y funcionamiento de las computadoras. - Conocer las diferentes arquitecturas de sistemas microprocesadores. - Evaluar medidas de rendimiento y comparar arquitecturas. - Analizar el impacto de la tecnología de las computadoras en contextos sociales y económicos. Enseñar los fundamentos teóricos de la organización y arquitectura interna de las computadoras puede ser un reto debido a la complejidad de los procesos involucrados. Los estudiantes necesitan desarrollar altos niveles de abstracción para construir modelos mentales que les permitan entender conceptos como la ejecución de instrucciones, la gestión de memoria o la interacción entre componentes del sistema. En este contexto, los simuladores se configuran como mediadores didácticos que permiten representar gráficamente procesos abstractos, facilitando la manipulación de parámetros y el análisis de resultados en un entorno seguro, repetible y sin restricciones físicas. Estas herramientas permiten a los alumnos experimentar con configuraciones y parámetros, observar su impacto en el rendimiento del sistema y explorar escenarios hipotéticos sin necesidad de hardware físico. Además, la simulación actúa como un puente entre la teoría y la práctica, facilitando que los docentes refuercen conceptos abstractos con experiencias concretas. En conjunto, estas ventajas hacen de la simulación una metodología pedagógica invaluable, promoviendo la experimentación y el aprendizaje activo en la enseñanza de Arquitectura de Computadoras (Skrien 2001; Garcia-Garcia et al. 2020; Nova, Ferreira, and Araújo 2013). Bibliografía "],["el-formalismo-devs-discrete-event-system-specification.html", "3.3 El Formalismo DEVS (Discrete Event System Specification)", " 3.3 El Formalismo DEVS (Discrete Event System Specification) El formalismo DEVS es una metodología modular y jerárquica que permite modelar y analizar sistemas representables como sistemas de eventos discretos, continuos o híbridos. Desarrollado por Bernard P. Zeigler en la década de 1970, este enfoque amplía el concepto de las máquinas de Moore al añadir una estructura que permite representar el comportamiento de sistemas mediante eventos temporizados que provocan cambios de estado, capturando así tanto la dinámica interna como las interacciones externas del sistema (B. Zeigler, Prähofer, and Kim 2000). 3.3.1 Estructura del formalismo DEVS Esta estructura permite capturar tanto el comportamiento interno como la interacción externa del sistema modelado. DEVS describe el comportamiento de un sistema real utilizando eventos de entrada y salida, así como transiciones entre estados definidos. Un sistema en este formalismo se compone de dos tipos principales de modelos: Modelos atómicos: representan las unidades fundamentales de comportamiento. Modelos acoplados: integran modelos atómicos y/o otros modelos acoplados, permitiendo la construcción jerárquica de sistemas más complejos. Esta organización modular facilita el análisis y la gestión de sistemas, permitiendo probar subsistemas de manera aislada antes de integrarlos en un modelo completo. La siguiente figura 3.1 ilustra la organización modular del formalismo DEVS, mostrando cómo se integran modelos atómicos dentro de modelos acoplados: Figura 3.1: Relación entre modelos atómicos y modelos acoplados en DEVS 3.3.2 Aplicaciones del formalismo DEVS “El formalismo DEVS encuentra aplicación en diversos ámbitos, como las redes de comunicación (Fujimoto 2001), donde permite simular el enrutamiento de paquetes y la congestión de redes; en entornos de manufactura (B. Zeigler, Prähofer, and Kim 2000), donde se modelan flujos de producción y control de calidad; y en sistemas de transporte, para la optimización de flujos vehiculares (Barros 1997). También se utiliza en la simulación de sistemas biológicos, como la propagación de enfermedades o el comportamiento de poblaciones (Bernard P. Zeigler, Jammalamadaka, and Akerkar 2004). En el ámbito de la educación, DEVS se ha implementado en simuladores para la enseñanza de arquitectura de computadoras, permitiendo a los estudiantes explorar y comprender conceptos complejos mediante la visualización y manipulación de modelos (Calvo Valdes, Roldan Ramirez, and San Miguel Sanchez 2010). Estas aplicaciones destacan su versatilidad para optimizar sistemas complejos en escenarios del mundo real. 3.3.3 DEVS en la enseñanza de la Arquitectura de Computadoras La implementación de entornos de simulación basados en DEVS en la enseñanza de arquitectura de computadoras aporta múltiples ventajas que enriquecen el proceso de aprendizaje: Representación visual: ofrece diagramas y representaciones dinámicas que ayudan a los estudiantes a visualizar y comprender procesos internos, como la ejecución de instrucciones y la gestión de recursos. Interactividad: permite modificar configuraciones y parámetros, fomentando la experimentación y mostrando el impacto directo de estas variables en el rendimiento del sistema. Exploración de escenarios: posibilita simular escenarios hipotéticos y evaluar el comportamiento de sistemas complejos sin la necesidad de hardware físico. Estas funcionalidades enriquecen la experiencia educativa al integrar la teoría con la práctica y fomentar una participación activa en el análisis de los principios fundamentales de la arquitectura computacional. Al adoptar DEVS como parte del entorno educativo, se potencia la capacidad de los estudiantes para abordar problemas complejos y explorar soluciones innovadoras (Calvo Valdés, Roldán Ramírez, and San Miguel Sánchez 2010). En conclusión, el formalismo DEVS no solo es una herramienta valiosa para el modelado y análisis de sistemas, sino que también representa un recurso poderoso para facilitar la enseñanza de conceptos complejos, como los que se encuentran en la arquitectura de computadoras. Bibliografía "],["comparativa.html", "Capítulo 4 Comparativa de simuladores", " Capítulo 4 Comparativa de simuladores Este capítulo presenta un análisis comparativo de simuladores basados en la arquitectura x86, con el objetivo de determinar su adecuación para su integración en la asignatura Arquitectura de Computadoras de la Licenciatura en Sistemas de Información. La selección y evaluación de estos simuladores se fundamenta en criterios específicos diseñados para medir su efectividad en un entorno educativo. El objetivo principal es identificar las herramientas que mejor respalden el proceso de enseñanza y aprendizaje. Los criterios definidos abarcan aspectos clave para la enseñanza de arquitectura de computadoras: facilidad de uso, funcionalidades del entorno de programación, calidad de los recursos de apoyo, mecanismos de ejecución de programas, precisión en la emulación de la arquitectura x86, características técnicas del software y su alineación con los contenidos curriculares. Los resultados de esta investigación fueron publicados en el XVII Congreso de Tecnología en Educación y Educación en Tecnología (2022), en el trabajo titulado Herramientas de software para dar soporte en la enseñanza y aprendizaje de la arquitectura x86 (Colombani, Ruiz, et al. 2022). Bibliografía "],["estudios-similares.html", "4.1 Estudios similares", " 4.1 Estudios similares Existen antecedentes de estudios comparativos que evalúan simuladores aplicados a la enseñanza en cursos de arquitectura de computadoras: - “A survey and evaluation of simulators suitable for teaching courses in computer architecture and organization”, 2009 (Nikolic et al. 2009): este estudio analiza simuladores considerando dos categorías principales. La primera, relacionada con las características de simulación, incluye criterios como granularidad, usabilidad, disponibilidad, presentación visual y flujo de simulación. La segunda categoría evalúa la cobertura de los contenidos establecidos en los planes de estudio. - “Survey and evaluation of simulators suitable for teaching for computer architecture and organization Supporting undergraduate students at Sir Syed University of Engineering &amp; Technology”, 2012 (Hasan and Mahmood 2012): este trabajo evalúa aspectos como la usabilidad, disponibilidad, fundamentos de arquitectura informática, jerarquía de sistemas de memoria, comunicación e interfaz, y diseño de sistemas de procesadores. A diferencia de los estudios mencionados, este trabajo propone una evaluación centrada exclusivamente en simuladores de arquitectura x86, mediante el uso de criterios diseñados ad hoc para analizar tanto las funcionalidades de simulación como su adecuación a los contenidos específicos de la asignatura Arquitectura de Computadoras dictada en la Licenciatura en Sistemas de la Universidad Nacional de Entre Ríos. Bibliografía "],["simuladores-bajo-análisis.html", "4.2 Simuladores bajo análisis", " 4.2 Simuladores bajo análisis Un simulador de arquitectura es una herramienta de software que emula el hardware de un sistema de cómputo, permitiendo representar aspectos arquitectónicos y funcionales del mismo. Estos simuladores ofrecen un entorno controlado para realizar pruebas, modificaciones y ejecución de programas sin riesgo de dañar componentes físicos o enfrentar limitaciones de hardware (Radivojevic, Cvetanovic, and Ðordevic 2011). Algunos simuladores destacan por proporcionar una representación visual e interactiva de la organización y arquitectura interna de una computadora, facilitando la comprensión de su funcionamiento. Algunos ejemplos relevantes de simuladores son: Assembly Debugger (x86), Simple 8-bit Assembler Simulator, Microprocessor Simulator, Simulador de ensamblador de 16 bits y Emu8086. Estas herramientas juegan un papel fundamental en el aprendizaje de la arquitectura de computadoras, al conectar conceptos teóricos con experiencias prácticas y simplificar abstracciones complejas, además de servir como soporte en la labor docente (Nikolic et al. 2009; Hasan and Mahmood 2012; Hennessy and Patterson 2017; Stallings 2021; BEHROOZ 2005). Bibliografía "],["criterios-de-evaluación.html", "4.3 Criterios de evaluación", " 4.3 Criterios de evaluación Los criterios de evaluación se definieron con el objetivo de realizar un análisis integral y sistemático de los simuladores seleccionados. A continuación, se presentan estos criterios junto con sus respectivos indicadores y escalas: Usabilidad: evalúa la facilidad de uso del simulador. Indicadores: Facilidad de aprendizaje (tiempo necesario para familiarizarse con la herramienta). Interfaz de usuario (claridad y organización). Documentación y ayuda (accesibilidad y calidad de tutoriales y guías). Escala: Difícil - Media - Fácil. Editor: analiza las funcionalidades para escribir y depurar código ensamblador. Indicadores: Capacidad de edición (resaltado de sintaxis, puntos de interrupción, etc.). Manejo de errores de sintaxis. Opciones de almacenamiento (guardar y cargar programas). Escala: Baja - Media - Alta. Documentación: valora la disponibilidad y calidad de los recursos de aprendizaje proporcionados. Indicadores: Manual de usuario. Tutoriales de aprendizaje. Exhaustividad en la descripción del repertorio de instrucciones. Escala: Mínima - Media - Completa. Ejecución de simulación: mide la facilidad para controlar y observar la ejecución de programas. Indicadores: Control de simulación (pausa, reanudación, retroceso). Visualización del flujo de ejecución. Configurabilidad (ajuste de parámetros como la velocidad del reloj). Escala: Baja - Media - Alta. Nivel de especificación de la Organización y Arquitectura del sistema simulado: determina la precisión en la representación de la arquitectura x86. Indicadores: Fidelidad en la representación de la arquitectura. Completitud del conjunto de instrucciones implementadas. Inclusión y funcionalidad de memoria y módulos de E/S. Escala: Mínima - Media - Completa. Características del producto software: evalúa las propiedades generales del simulador. Indicadores: Tipo de licencia (open source o privativa). Frecuencia de actualizaciones. Plataforma (aplicación web o de escritorio) Escala: Mala - Buena - Muy buena. Cobertura de los contenidos preestablecidos en la currícula: mide el grado en que el simulador abarca los contenidos de la asignatura. Indicadores: Alineación con los tópicos del currículum. Profundidad en el tratamiento de los temas. Escala: Baja - Media - Alta. La Tabla 4.1 resume los criterios, indicadores y escalas utilizadas. Tabla 4.1: Criterios e indicadores de evaluación de simuladores Criterio Indicadores Escala Usabilidad Facilidad de aprendizaje, interfaz, documentación Difícil - Fácil Funcionalidad del editor Sintaxis, manejo de errores, guardar/cargar Baja - Alta Calidad de la documentación Manuales, tutoriales, repertorio de instrucciones Mínima - Completa Ejecución de simulación Control de simulación, visualización del flujo, configurabilidad Baja - Alta Especificación de arquitectura x86 Fidelidad de la arquitectura, repertorio, memoria y E/S Mínima - Completa Propiedades técnicas y de distribución Licencia, actualizaciones, plataforma Mala - Muy buena Alineación con contenidos curriculares Cobertura de tópicos, profundidad del tratamiento Baja - Alta "],["selección-de-simuladores.html", "4.4 Selección de simuladores", " 4.4 Selección de simuladores Mediante una exploración exhaustiva de fuentes disponibles en línea, foros académicos y repositorios educativos, se identificaron los siguientes simuladores de arquitectura x86: Assembly Debugger (x86), Simple 8-bit Assembler Simulator, Microprocessor Simulator, Simulador de ensamblador de 16 bits, Emu8086, VonSim, Orga1 y Qsim. Estos simuladores fueron seleccionados por su relevancia en el ámbito educativo y su potencial para facilitar la enseñanza de la arquitectura x86. La selección se basó en una evaluación preliminar que consideró el tiempo necesario para su análisis y el grado de cumplimiento de los criterios definidos, priorizando aquellos simuladores que ofrecieran un balance adecuado entre funcionalidad, usabilidad, documentación y alineación con los contenidos curriculares de la asignatura Arquitectura de Computadoras. De esta preselección, se eligieron tres herramientas que, a priori, cumplían con la mayor cantidad de criterios evaluativos: Emu8086, VonSim y Simple 8-bit Assembler Simulator. Tabla 4.2: Proceso de selección de simuladores Simulador Exploración.Previa Evaluación.Final Assembly Debugger (x86) 1 0 Simple 8-bit Assembler Simulator 1 1 Microprocessor Simulator 1 0 Simulador de ensamblador de 16 bits 1 0 Emu8086 1 1 VonSim 1 1 Orga1 1 0 Qsim 1 0 "],["participantes-en-la-evaluación.html", "4.5 Participantes en la evaluación", " 4.5 Participantes en la evaluación La evaluación fue llevada a cabo por un equipo conformado por tres docentes de la asignatura Arquitectura de Computadoras —Marcelo A. Colombani, José M. Ruiz y Amalia G. Delduca—, quienes aportaron su experiencia en el uso pedagógico de simuladores. Asimismo, se contó con la participación de un asesor externo, Marcelo A. Falappa, quien aportó una perspectiva independiente y validó tanto la metodología como los resultados obtenidos. "],["análisis-comparativo.html", "4.6 Análisis comparativo", " 4.6 Análisis comparativo A continuación, se presenta un análisis detallado de los simuladores seleccionados, basado en los criterios previamente establecidos: 4.6.1 Simple 8-bit Assembler Simulator Usabilidad: Nivel medio. Todos los componentes se muestran en una sola pantalla, lo que puede resultar abrumador para usuarios principiantes. Editor: Nivel bajo. Incluye notificaciones de errores de sintaxis al ensamblar, pero carece de resaltado de sintaxis, puntos de interrupción (breakpoints) y opciones para guardar o cargar programas. Documentación: Nivel mínimo. Consta solo de un manual de instrucciones implementadas. Ejecución de simulación: Nivel medio. Permite ajustar la velocidad del reloj de la CPU y proporciona controles básicos de simulación. Nivel de especificación: Nivel mínimo. Simplifica la arquitectura x86 a un CPU de 8 bits con 256 bytes de memoria y sin soporte para operaciones de entrada/salida (IN/OUT). Desarrollo del producto: Nivel bueno. Licencia MIT, última actualización en 2015, desarrollado como una plataforma web. Cobertura de contenidos: Nivel bajo. No incluye memoria independiente para módulos de entrada y salida, rutinas de interrupciones ni representación visual del ciclo de instrucción. 4.6.2 VonSim Usabilidad: Nivel medio. Utiliza solapas para presentar los componentes, lo que puede ser confuso para usuarios iniciales. Editor: Nivel medio. Proporciona notificaciones de errores de sintaxis, resaltado de código y puntos de interrupción mediante software. Documentación: Nivel medio. Incluye un manual de uso y un tutorial interactivo. Ejecución de simulación: Nivel medio. Permite ajustar la velocidad del reloj de la CPU y ofrece controles básicos de simulación. Nivel de especificación: Nivel medio. Representa una simplificación del procesador 8088 con arquitectura de 16 bits y memoria direccionable de 16 KiB. Desarrollo del producto: Nivel muy bueno. Licencia GNU Affero General Public License v3.0, última versión en 2020, con amplia evidencia de uso académico. Cobertura de contenidos: Nivel medio. Implementa dispositivos internos y externos, pero carece de visualización del ciclo de instrucción y métricas de rendimiento. 4.6.3 Emu8086 Usabilidad: Nivel fácil. Inicialmente muestra el editor y permite activar los componentes del simulador a medida que se cargan programas. Editor: Nivel alto. Incluye notificaciones de errores de sintaxis, resaltado de código, puntos de interrupción y opciones para guardar/cargar programas. Documentación: Nivel completo. Ofrece un manual de instrucciones con ejemplos, un tutorial de aprendizaje y una guía de uso detallada. Ejecución de simulación: Nivel alto. Proporciona control avanzado de la simulación, como retroceder una instrucción (“step back”). Nivel de especificación: Nivel completo. Detalla la arquitectura del procesador 8086, con memoria direccionable de 1 MiB y soporte para interrupciones de software y hardware. Desarrollo del producto: Nivel bueno. Licencia privativa, última actualización en 2023, desarrollado para plataformas de escritorio. Cobertura de contenidos: Nivel alto. Emula el arranque (bootstrapping) de una IBM PC desde un disco flexible (floppy disk) y soporta todos los modos de direccionamiento. Tabla 4.3: Comparativa según criterios de evaluación preestablecidos Criterio.de.Evaluación Simple.8.bit VonSim Emu8086 Usabilidad Medio Medio Fácil Editor Bajo Medio Alto Documentación Mínima Media Completa Ejecución de simulación Medio Medio Alta Nivel de especificación x86 Mínima Media Completa Características del producto Buena Muy buena Buena Cobertura de contenidos Baja Media Alta "],["resultados.html", "4.7 Resultados", " 4.7 Resultados La asignatura promueve el uso de simuladores para apoyar la enseñanza y el aprendizaje, permitiendo aplicar los contenidos desarrollados en máquinas reales. Emu8086 es la herramienta más adecuada para esta finalidad, ya que facilita la implementación de programas en hardware real. Sin embargo, su dependencia de MS-DOS complica su ejecución en sistemas operativos actuales, requiriendo el uso de emuladores de MS-DOS, lo que añade complejidad al proceso de enseñanza y aprendizaje. Desde 2018, la asignatura utiliza la versión 4.08 de Emu8086. La herramienta tiene un periodo de evaluación gratuito de 14 días, después del cual se debe adquirir una licencia. Esto es un inconveniente, ya que se busca que los estudiantes puedan acceder a las herramientas de forma libre y gratuita. Utilizar lenguaje NASM (Netwide Assembler) garantiza soporte tanto para Linux como Windows a través de herramientas libres como GCC (GNU Compiler Collection), generando programas para la arquitectura x86 de 16, 32 y 64 bits. Emu8086 destaca por su interfaz dinámica, que muestra componentes como la pila, flags, teclado y pantalla solo cuando son necesarios, a diferencia de otros simuladores que presentan todos sus componentes desde el inicio. Emu8086 sobresale particularmente en los aspectos vinculados a la edición, documentación y control de la ejecución. Su editor permite establecer puntos de ruptura, retroceder una instrucción, y guardar o recuperar programas desde la interfaz. Además, ofrece una documentación extensa, que incluye un repertorio de instrucciones con ejemplos, un tutorial para el aprendizaje del lenguaje ensamblador y un manual detallado del entorno de desarrollo. Estas características lo posicionan como una herramienta completa en términos de acompañamiento a los procesos de enseñanza y aprendizaje. En el criterio de evaluación cuatro, Emu8086 se destaca por ofrecer una mayor cantidad de controladores para gestionar el flujo de ejecución, como la capacidad de retroceder la ejecución de una instrucción y recargar el programa actual. En cuanto al nivel de especificación, Emu8086 representa con gran precisión la arquitectura x86, incluyendo soporte para interrupciones del sistema operativo MS-DOS. Esta característica permite simular de manera realista programas que podrían ejecutarse en un entorno compatible, constituyendo una ventaja significativa frente a los otros simuladores analizados. En el criterio de evaluación seis VonSim se destaca del resto debido a que es licencia libre y posee una comunidad que respalda el proyecto. En cuanto al último criterio, ninguna de las herramientas evaluadas cubre todos los contenidos que se pretende desarrollar con la ayuda de una herramienta, quedando excluido pasos del ciclo de instrucción y medidas de rendimientos (tiempo de CPU y CPI: ciclo por instrucción). A partir del análisis comparativo, se destacan las siguientes observaciones clave: Emu8086 presenta la interfaz más intuitiva y completa, con amplia documentación y una simulación precisa de la arquitectura x86. Sin embargo, su licencia privativa y la necesidad de emuladores para su ejecución en sistemas actuales constituyen limitaciones relevantes. VonSim, con su licencia libre y actualización reciente, representa una alternativa interesante desde una perspectiva de software abierto, aunque su cobertura de contenidos y nivel de especificación son limitados en comparación. Simple 8-bit Assembler Simulator resulta insuficiente para cubrir los objetivos curriculares de la asignatura, debido a su bajo nivel de complejidad, escasa documentación y capacidades limitadas de simulación. En conclusión, si bien cada simulador ofrece ventajas puntuales, ninguno logra satisfacer plenamente los requerimientos pedagógicos y técnicos de la asignatura en su totalidad. Por ello, se recomienda continuar utilizando Emu8086 de manera transitoria, mientras se avanza en el desarrollo de un simulador propio que integre sus fortalezas, opere con licencia libre y sea compatible con entornos modernos. Esta iniciativa permitirá una mayor adecuación curricular, accesibilidad tecnológica y sostenibilidad en el tiempo. 4.7.1 Publicación Este análisis comparativo fue publicado en el XVII Congreso de Tecnología en Educación y Educación en Tecnología (2022), bajo el título “Herramientas de software para dar soporte en la enseñanza y aprendizaje de la arquitectura x86”(Colombani, Ruiz, et al. 2022). Además, durante este proceso se estableció contacto con un desarrollador de VonSim, logrando implementar mejoras significativas, como animaciones de ejecución y documentación en línea, disponibles en su última versión publicada en agosto de 2023. Bibliografía "],["desarrollo.html", "Capítulo 5 Diseño y Construcción del Simulador", " Capítulo 5 Diseño y Construcción del Simulador En este capítulo se describe el diseño y desarrollo de una herramienta de simulación específica para la arquitectura x86, orientada a facilitar la enseñanza de los principios de arquitectura de computadoras. Se detalla la justificación del diseño, los pasos seguidos para su construcción y los métodos utilizados para validar su funcionalidad. En el capítulo anterior se analizaron y evaluaron las herramientas de simulación existentes para la arquitectura x86. Esta revisión exhaustiva permitió identificar las limitaciones de las soluciones actuales y fundamentar la necesidad de desarrollar una herramienta específica, cuyos resultados fueron publicados posteriormente. Para cumplir con este objetivo, el diseño de la herramienta sigue una serie de requisitos establecidos que guían su desarrollo, validación y alineación con los objetivos pedagógicos. "],["requisitos-de-la-herramienta.html", "5.1 Requisitos de la herramienta", " 5.1 Requisitos de la herramienta La herramienta de simulación está diseñada para cumplir los siguientes requisitos: Representación global de la estructura y funcionamiento de la computadora: Representar de forma gráfica la arquitectura general de la computadora (CPU, bus, memoria y dispositivos de E/S) durante la ejecución de programas, destacando los componentes relevantes en cada etapa del proceso. Soporte para la generación y ejecución de programas en ensamblador: Permitir tanto la ejecución paso a paso como la ejecución completa de programas en lenguaje ensamblador, promoviendo la comprensión detallada de cada instrucción. Repertorio de instrucciones reducido y habilitación progresiva: Seleccionar un subconjunto esencial de instrucciones x86, que se habiliten progresivamente según avance la asignatura, adaptándose al ritmo de aprendizaje de los estudiantes. Esta estrategia didáctica facilita la asimilación gradual del conjunto de instrucciones (ISA) y es consistente con enfoques pedagógicos en el área de organización y arquitectura de computadores (Null 2023; Stallings 2021) Simulación visual e interactiva de micropasos de instrucciones: Representar el flujo de datos con el lenguaje de transferencia entre registros (RTL), destacando visualmente cada componente involucrado en la ejecución de un programa. Gestión básica de interrupciones y periféricos: Incorporar un vector de interrupción predefinido para interactuar con dispositivos como teclado y monitor. También incluir instrucciones IN y OUT, junto con un módulo simplificado de entrada/salida. Métricas de rendimiento: Proporcionar indicadores clave como tiempo de ciclo, tiempo de CPU y ciclos por instrucción (CPI) para analizar la ejecución de programas. Según Hennessy y Patterson (Hennessy and Patterson 2017), estos indicadores permiten evaluar la eficiencia del procesamiento a nivel de arquitectura. Bibliografía "],["diseño-conceptual.html", "5.2 Diseño conceptual", " 5.2 Diseño conceptual Una vez establecidos los requisitos funcionales y pedagógicos de la herramienta, se procede a detallar su diseño conceptual, el cual traduce dichos lineamientos en una arquitectura concreta del simulador. Esta planificación garantiza la coherencia entre el diseño técnico y los objetivos de enseñanza propuestos. La Figura 5.1 representa la arquitectura general del simulador. Esta representación visual permite distinguir los flujos diferenciados de control e información durante la ejecución de los programas, facilitando la comprensión de la segmentación funcional del sistema simulado. Figura 5.1: Arquitectura general del simulador 5.2.1 Modelo arquitectónico Se propone una versión simplificada de 8 bits basada en la arquitectura x86, diseñada con un repertorio de instrucciones reducido y un conjunto de componentes esenciales. La elección de una arquitectura de 8 bits responde a una estrategia didáctica: al reducir la complejidad del sistema original, se prioriza la comprensión conceptual sobre la fidelidad técnica, conservando la esencia del repertorio x86. 5.2.1.1 Principales bloques funcionales El simulador se compone de los siguientes bloques funcionales: Tabla 5.1: Bloques funcionales principales Bloque Funcional Descripción Unidad Central de Procesamiento (CPU) Simulación de registros, Unidad de Control (UC) y Unidad Aritmética y Lógica (ALU). Memoria Estructura de memoria y simulación de operaciones de lectura y escritura. Sistema de Entrada/Salida (E/S) Interacción con periféricos y manejo de interrupciones. Bus de datos, direcciones y control Modelado de la comunicación entre componentes. 5.2.1.2 Características del CPU En correspondencia con los bloques funcionales anteriormente mencionados, a continuación se describen las características específicas del CPU simulado. El diseño del CPU simplificado se describe en la siguiente tabla 5.2: Tabla 5.2: Componentes del CPU x86 Componente Características Arquitectura Von Neumann, memoria compartida para datos e instrucciones. Registros 4 registros de propósito general (AL, BL, CL y DL) de 8 bits cada uno. 4 registros de propósito específico: IP (Instruction Pointer) IR (Instruction Register) SP (Stack Pointer) RS (registro de estado) 2 registros intermedios (MAR: buffer de direcciones y MBR: buffer de datos) para comunicación entre CPU y memoria. Memoria Memoria de 256 posiciones, con una capacidad de un byte por posición. Buses Bus de datos y direcciones de 8 bits. Instrucciones Longitud variable de instrucciones (1, 2 y 3 Bytes). Modos de direccionamiento: registro a registro, directo, indirecto e inmediato. "],["implementación-del-repertorio-de-instrucciones.html", "5.3 Implementación del repertorio de instrucciones", " 5.3 Implementación del repertorio de instrucciones 5.3.1 Selección del repertorio inicial El repertorio de instrucciones fue diseñado como una versión reducida y didáctica basada en la arquitectura x86, con el propósito de facilitar los procesos de enseñanza y prendizaje en contextos introductorios de Arquitectura de Computadoras.En una primera etapa, se introducen únicamente las instrucciones esenciales para abordar los contenidos iniciales de la asignatura: Tabla 5.3: Tabla de instrucciones y códigos de operación Instrucciones Código operación nemónico Acción Transferencia de datos {0, 1, 2} MOV 0 - Operación entre registros 1 - Operación carga a registro 2 - Operación almacena en memoria Procesamiento de datos {3, 4, 5} ADD 3-4-5 Sumar {6, 7, 8} SUB 6-7-8 Restar {9, 10, 11} CMP 9-10-11 Comparar Control de flujo {12} JMP 12-a Salto incondicional JZ 12-b Salto condicional si Z=1 JC 12-c Salto condicional si C=1 Nota: Las instrucciones de transferencia y de procesamiento de datos tienen los tres tipos de combinaciones en los operandos. 5.3.2 Justificación de la simplificación La arquitectura x86 se caracteriza por un repertorio de instrucciones extenso y heterogéneo, junto con múltiples modos de direccionamiento y niveles de privilegio, lo cual puede dificultar su abordaje inicial en contextos educativos. Por ello, el simulador se desarrolla bajo un enfoque pedagógico que considera: Reducir la carga cognitiva: la simplificación del repertorio y de los componentes permite a los estudiantes enfocarse en principios fundamentales. Aprendizaje progresivo: se adopta un enfoque escalonado, empezando con un modelo simplificado y avanzando hacia representaciones más completas de x86. Claridad pedagógica: las actividades prácticas resultan accesibles en cuanto a tiempo y complejidad, lo que permite una progresión gradual y significativa en la adquisición de conocimientos técnicos. 5.3.3 Beneficios de la simplificación El diseño del simulador contribuye a: Comprensión fundamental: los estudiantes pueden enfocarse en el ciclo de instrucciones, interacción de componentes y flujo básico de datos. Análisis crítico: comparar el modelo pedagógico simplificado con la arquitectura x86 en su versión completa fomenta un aprendizaje reflexivo y profundo. Experimentación práctica: proporciona un entorno accesible para explorar conceptos y corregir errores. 5.3.4 Codificación binaria de las instrucciones A fin de facilitar la decodificación y ejecución en el simulador, se estableció un formato binario específico para representar cada tipo de instrucción. La siguiente tabla 5.4 resume los principales formatos codificados: Tabla 5.4: Tabla de codificación de instrucciones Tipo Operación Codificación Parámetros A: entre registros ____XXYY XX = Registro destino YY = Registro fuente Transferencia y procesamiento B: Cargar a registro ____XX00 MMMMMMMM XX = Registro destino M = Dirección de memoria C: Almacenar en memoria ____00YY MMMMMMMM YY = Registro fuente M = Dirección de memoria Control D: control de flujo ____ffff MMMMMMMM ffff = funcionalidad M = Dirección de memoria Considerando: ____: Código de operación de la instrucción, número de 4 bits. XX o YY: Índices de registros, número entre 0 y 3, cada índice es de 2 bits. M: Dirección de memoria, número de 8 bits. ffff: campo funcional de 4 bits que especifica el tipo de operación de control a realizar, como saltos condicionales o incondicionales. Como ejemplo, la instrucción MOV AL, BL (transferencia entre registros) se codifica como 00000001, donde los primeros cuatro bits (0000) representan el código de operación correspondiente a MOV, seguidos por los códigos binarios de los registros destino (00 para AL) y fuente (01 para BL). 5.3.5 Modos de direccionamiento Los modos de direccionamiento definidos en esta etapa son: Registro a registro (Rx,Ry): operandos son registros del procesador. Directo ([M]): operando es el contenido de una dirección de memoria. 5.3.5.1 Banco de registros Registros (R) Binario Decimal AL 00 0 BL 01 1 CL 10 2 DL 11 3 En esta primera etapa se implementan las siguientes instrucciones con estos modos de direccionamiento y formato de instrucciones: # Instrucción Acción Codificación 0 MOV Rx, Ry Rx ← Ry 0000 XXYY 1 MOV Rx, [M] Rx ← Mem[Dirección] 0001 00YY MMMMMMMM 2 MOV [M], Ry Mem[Dirección] ← Rx 0010 XX00 MMMMMMMM 3 ADD Rx, Ry Rx ← Rx + Ry 0011 XXYY 4 ADD Rx, [M] Rx ← Rx + Mem[Dirección] 0100 00YY MMMMMMMM 5 ADD [M], Ry Mem[Dirección] ← Mem[Dirección] + Ry 0101 XX00 MMMMMMMM 6 SUB Rx, Ry Rx ← Rx - Ry 0110 XXYY 7 SUB Rx, [M] Rx ← Rx - Mem[Dirección] 0111 00YY MMMMMMMM 8 SUB [M], Ry Mem[Dirección] ← Mem[Dirección] - Ry 1000 XX00 MMMMMMMM 9 CMP Rx, Ry Modifica flags de Rx - Ry 1001 XXYY A CMP Rx, [M] Modifica flags de Rx - Mem[Dirección] 1010 00YY MMMMMMMM B CMP [M], Ry Modifica flags de Mem[Dirección] - Ry 1011 XX00 MMMMMMMM C JMP M IP ← Dirección 1100 0000 MMMMMMMM C JC M Si flag C=1 entonces IP ← Dirección 1100 0001 MMMMMMMM C JZ M Si flag Z=1 entonces IP ← Dirección 1100 0011 MMMMMMMM 5.3.6 Ciclo de la instrucción: Etapas de captación y ejecución En este apartado se detalla el proceso llevado a cabo por la Unidad de Control (UC) para ejecutar cada instrucción, destacando los aspectos clave: Secuencia de pasos. Registros involucrados en cada etapa del proceso. Uso de los buses de datos, direcciones y control. Señales de control generadas. El ciclo de la instrucción se define como la secuencia de microoperaciones necesarias para ejecutar una instrucción en el sistema. Estas microoperaciones se expresan mediante un lenguaje de transferencia entre registros, representado de la forma: destino \\(\\leftarrow\\) origen 5.3.6.1 Etapa de Captación: En esta etapa, común a todas las instrucciones, consiste en la lectura de la instrucción desde la memoria. MAR \\(\\leftarrow\\) IP: el contenido del registro puntero de instrucciones IP se transfiere al registro de direcciones de memoria MAR. La UC genera la señal necesaria para seleccionar el valor del IP y copiarlo en el MAR. MDR \\(\\leftarrow\\) read(Memoria[MAR]) ; IP \\(\\leftarrow\\) IP + 1: la UC activa la señal de lectura (read) hacia la memoria, utilizando el valor del MAR como dirección. El dato leído se transfiere al registro de datos de memoria MBR a través del bus de datos. Simultáneamente, el IP se incrementa en 1 para apuntar al siguiente byte. IR \\(\\leftarrow\\) MBR: el contenido del MBR se transfiere al registro de instrucciones IR, completando la etapa de captación. 5.3.6.2 Etapa de Ejecución: En esta etapa, las operaciones específicas dependen del tipo de instrucción. A continuación, se describen algunos casos representativos: MOV Rx, Ry (Copia entre registros) Rx \\(\\leftarrow\\) Ry: el contenido del registro Ry se copia en el registro Rx. MOV Rx, [Dirección] (Carga a registro) MAR \\(\\leftarrow\\) IP: el valor del IP se transfiere a MAR. MBR \\(\\leftarrow\\) read(Memoria[MAR]); IP \\(\\leftarrow\\) IP + 1: se lee (read) de memoria el contenido de la dirección indicada por MAR y se almacena en MBR.Simultáneamente, el IP se incrementa. MAR \\(\\leftarrow\\) MBR: el contenido de MBR se transfiere a MAR. MBR \\(\\leftarrow\\) read(Memoria[MAR]): se lee de memoria el contenido de la dirección indicada por MAR y se almacena en MBR. Rx \\(\\leftarrow\\) MBR: el contenido del MBR se copia al registro Rx. MOV [Dirección], Ry (Almacenar en memoria) igual que MOV Rx, [Dirección]. MBR \\(\\leftarrow\\) Ry: el contenido de Ry se transfiere a MBR. write(Memoria[MAR]) \\(\\leftarrow\\) MBR: el contenido de MBR se escribe (write) en memoria en la dirección apuntada por el MAR. ADD Rx, [Dirección] (Sumar a registro) igual que MOV Rx, [Dirección]. Rx \\(\\leftarrow\\) Rx + MBR: la Unidad Aritmético-Lógica (ALU) realiza la suma entre Rx y MBR, almacenando el resultado en Rx. El Registro de Estado RS se actualiza con los indicadores correspondientes. SUB [Dirección], Ry (Restar a memoria) igual que MOV Rx, [Dirección]. MBR \\(\\leftarrow\\) Ry - MBR: la ALU resta el contenido de MBR al de Ry, almacenando el resultado en MBR. El RS se actualiza. write(Memoria[MAR]) \\(\\leftarrow\\) MBR: el contenido de MBR se escribe en memoria en la dirección apuntada por el MAR. CMP Rx, [Dirección] (Comparar a registro) igual que MOV Rx, [Dirección]. Rx - MBR: la ALU realiza la resta entre el contenido de Rx y MBR. Aunque el resultado no se almacena, el RS se actualiza con los indicadores de comparación. JMP Dirección (Salto incondicional) igual que MOV Rx, [Dirección]. IP \\(\\leftarrow\\) MBR: El contenido del MBR se transfiere al registro IP, estableciendo la nueva dirección de ejecución. JC Dirección (Salto condicional si C=1) Igual que MOV Rx, [Dirección]. Si C == 1: IP \\(\\leftarrow\\) MBR: si la bandera de acarreo (C) está activa, el contenido del MBR se transfiere al registro IP. JZ Dirección (Salto condicional si Z=1) igual que MOV Rx, [Dirección]. Si Z == 1: IP \\(\\leftarrow\\) MBR: si la bandera de cero (Z) está activa, el contenido del MBR se transfiere al registro IP. 5.3.7 Modos de direccionamiento adicionales Se incoporan los siguientes modos de direccionamiento: Indirecto por registro ([BL]): la dirección del operando se encuentra en el registro BL del procesador. Inmediato (d): operando es un valor contenido en la instrucción. 5.3.8 Formato ampliado Las instrucciones ahora se codifican con 1, 2 o 3 bytes dependiendo del modo: Las instrucciones de cargar a registro (B): Función Byte Interpretación 00 2 Directo M = Dirección de memoria 01 1 Indirecto utiliza como operando implícito el registro BL y no requiere operando M 10 2 Inmediato d = Dato inmediato 11 2 Indirecto la dirección se calcula operando implícito BL + Dato inmediato Las instrucciones de almacenar en memoria (C): Función Byte Interpretación 00YY 2 directo D = Dirección de memoria, YY = Registro fuente 01YY 1 indirecto BL, YY = Registro fuente 01YY 2 Indirecto la dirección se calcula operando implícito BL + Dato Inmediato 1100 3 Inmediato a memoria 1101 2 Inmediato a memoria mediante indirecto BL 1110 3 Inmediato a memoria mediante indirecto BL+ Dato Inmediato El formato ampliado para las instrucciones incluye los siguientes casos tabla 5.5: Tabla 5.5: Tabla de codificación de instrucciones ampliado Tipo Operación Codificación Parámetros Transferencia y procesamiento A: entre registros ____XXYY XX = Registro destino, YY = Registro fuente B: Cargar a registro ____XX00 MMMMMMMM XX00 = Registro destino y M = Dirección de memoria ____XX01 XX01 = Registro destino y direccion en registro [BL] ____XX00 dddddddd XX10 = Registro destino y d = Dato inmediato C: Almacenar en memoria ____00YY MMMMMMMM dddddddd YY = Registro fuente, M = Dirección de memoria, d = Dato Inmediato Control D: control de flujo ____ffff MMMMMMMM ffff = funcionalidad, M = Dirección de memoria Nota: d = dato inmediato, no puede ser destino de la instrucción. Tabla 5.6: Tabla de codificación de instrucciones ampliado CodOp Instrucción Acción Codificación 0 MOV Rx, Ry Rx ← Ry 0000 XXYY 1 MOV Rx, [M] Rx ← Mem[Dirección] 0001 XX00 MMMMMMMM 1 MOV Rx, [BL] Rx ← Mem[BL] 0001 XX01 1 MOV Rx, D Rx ← Dato 0001 XX10 MMMMMMMM 1 MOV Rx, [BL + D] Rx ← Mem[BL + Dato] 0001 XX11 MMMMMMMM 2 MOV [M], Ry Mem[Dirección] ← Rx 0010 00YY MMMMMMMM 2 MOV [BL], Ry Mem[BL] ← Rx 0010 01YY 2 MOV [BL + D], Ry Mem[BL + Dato] ← Rx 0010 10YY MMMMMMMM 2 MOV [M], D Mem[Dirección] ← Dato 0010 1100 MMMMMMMM dddddddd 2 MOV [BL], D Mem[BL] ← Dato 0010 1101 MMMMMMMM 2 MOV [BL + D], D Mem[BL + Dato] ← Dato 0010 1110 MMMMMMMM 3 ADD Rx, Ry Rx ← Rx + Ry 0011 XXYY 4 ADD Rx, -- Carga en registro 0100 ---- -------- 5 ADD [M], -- Almacenar en memoria 0101 ---- -------- -------- 6 SUB Rx, Ry Rx ← Rx - Ry 0110 XXYY 7 SUB Rx, -- Carga en registro 0111 ---- -------- 8 SUB [M], -- Almacenar en memoria 1000 ---- -------- -------- 9 CMP Rx, Ry Rx - Ry: bo almacena el resultado en Rx 1001 XXYY A CMP Rx, -- registro - memoria 1010 ---- -------- B CMP [M], -- memoria - registro 1011 ---- -------- -------- C JMP M IP ← Dirección 1100 0000 MMMMMMMM C JC M Si C = 1 entonces IP ← Dirección 1100 0001 MMMMMMMM C JZ M Si Z = 1 entonces IP ← Dirección 1100 0011 MMMMMMMM C Jxx M Se pueden implementar más flags y CALL 1100 ffff MMMMMMMM 5.3.9 Ciclo de la instrucción: modos adicionales MOV Rx, [BL] (Carga indirecto) MAR \\(\\leftarrow\\) IP: El valor del IP se transfiere a MAR. MBR \\(\\leftarrow\\) read(Memoria[MAR]); IP \\(\\leftarrow\\) IP + 1: Se lee (read) de memoria el contenido de la dirección indicada por MAR y se almacena en MBR.Simultáneamente, el IP se incrementa. MAR \\(\\leftarrow\\) BL: El contenido de BL se transfiere a MAR. MBR \\(\\leftarrow\\) read(Memoria[MAR]): Se lee de memoria el contenido de la dirección indicada por MAR y se almacena en MBR. Rx \\(\\leftarrow\\) MBR: El contenido del MBR se copia al registro Rx. MOV Rx, Dato (Carga valor inmediato) MAR \\(\\leftarrow\\) IP: El valor del IP se transfiere a MAR. MBR \\(\\leftarrow\\) read(Memoria[MAR]); IP \\(\\leftarrow\\) IP + 1: Se lee (read) de memoria el contenido de la dirección indicada por MAR y se almacena en MBR.Simultáneamente, el IP se incrementa. Rx \\(\\leftarrow\\) MBR: El contenido del MBR se copia al registro Rx. "],["tercera-etapa.html", "5.4 Tercera etapa", " 5.4 Tercera etapa En esta etapa se incorporaron las instrucciones de manejo de pila y de interrupciones, ampliando la funcionalidad del simulador para cubrir un conjunto más completo de operaciones propias de la arquitectura x86. A continuación, se detalla el conjunto completo de instrucciones, incluyendo su clasificación, nemónicos y las acciones que representan. Tabla 5.7: Tabla de Instrucciones y Códigos de Operación de la Arquitectura x86 Código operación Instrucciones nemónico Acción MOV Transferencia de datos MOV destino, origen 1- Copiar entre registros 2- Cargar a registro 3- Almacenar en memoria ADD Aritmética ADD destino, origen 1- Sumar 2- Restar 3- Comparar JMP Control de flujo JMP destino Salto incondicional JMP. Saltos condicionales Jxx.Llamadas a rutinas CALL y retorno RET PUSH, POP, OUT, IN Pila y E/S PUSH, POP, OUT, IN Poner en la pila PUSH Retirar de la pila POP Enviar un byte al puerto del dispositivo de E/S Recibir un byte del dispositivo de E/S INT , IRET Interrupciones INT , IRET Llamar a una rutina de tratamiento de interrupción INT Retornar de una rutina de tratamiento de interrupción IRET NOP , HLT Control NOP , HLT No opera NOP Detiene el CPU HLT "],["simulación-visual-e-interactiva.html", "5.5 Simulación visual e interactiva", " 5.5 Simulación visual e interactiva Esta sección detalla la implementación de las características visuales e interactivas del simulador, diseñadas para facilitar la comprensión del flujo de datos y las microoperaciones dentro de la arquitectura x86. 5.5.1 Representación gráfica de componentes Diseño de la interfaz visual: incluye elementos como registros, buses y memoria, presentados de manera clara y organizada. Resaltado dinámico: los componentes relevantes se destacan visualmente durante la ejecución, proporcionando un seguimiento en tiempo real del flujo de datos. 5.5.2 Ejecución paso a paso Flujo interactivo: permite avanzar por cada etapa del ciclo de instrucción, desde la captura hasta la finalización. Opciones de visualización: se pueden observar los micropasos que conforman cada etapa de la ejecución, fomentando una comprensión detallada del proceso. "],["gestión-de-interrupciones-y-periféricos.html", "5.6 Gestión de interrupciones y periféricos", " 5.6 Gestión de interrupciones y periféricos Se describe la simulación de interrupciones y operaciones de entrada/salida, proporcionando una implementación básica para la interacción con periféricos. 5.6.1 Manejo del vector de interrupciones Vector predefinido: se incluye un conjunto de interrupciones estándar. Simulación de interrupciones: ejemplos como las interacciones con teclado y pantalla están modeladas para su análisis práctico. 5.6.2 Instrucciones IN y OUT Operaciones de entrada/salida: se implementan y simulan las instrucciones básicas para la interacción con periféricos. 5.6.3 Segunda etapa En esta etapa, se amplían los modos de direccionamiento e instrucciones: "],["integración-de-métricas-de-rendimiento.html", "5.7 Integración de métricas de rendimiento", " 5.7 Integración de métricas de rendimiento El simulador incorpora métricas clave para analizar el impacto del rendimiento en la arquitectura de computadoras. 5.7.1 Métricas calculadas Indicadores: tiempo de ciclo, tiempo de CPU y ciclos por instrucción (CPI). Visualización: las métricas se presentan en tiempo real durante la simulación, facilitando su análisis. 5.7.2 Análisis de casos de estudio Se incluyen ejemplos que ilustran cómo interpretar las métricas para optimizar el rendimiento. "],["proceso-de-validación.html", "5.8 Proceso de validación", " 5.8 Proceso de validación El proceso de validación garantiza que el simulador cumple con los requisitos pedagógicos y funcionales. 5.8.1 Validación funcional Pruebas de módulos: cada componente se verificó de manera individual. Ejecución completa: programas de prueba comprobaron la correcta implementación de las instrucciones. 5.8.2 Evaluación pedagógica Retroalimentación: opiniones de estudiantes y docentes guiaron los ajustes realizados. Objetivos educativos: el simulador prioriza la claridad conceptual sin sacrificar la precisión técnica. "],["portabilidad-y-mantenibilidad.html", "5.9 Portabilidad y Mantenibilidad", " 5.9 Portabilidad y Mantenibilidad Portabilidad: la herramienta se implementa como una aplicación web, compatible con cualquier navegador moderno. Mantenibilidad: el código modular y bien documentado facilita futuras actualizaciones y mejoras. "],["Biblio.html", "Capítulo 6 Bibliografía", " Capítulo 6 Bibliografía "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
